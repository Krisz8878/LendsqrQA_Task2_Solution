{
	"info": {
		"_postman_id": "8f460b6e-eee7-4739-bfb7-0b12e837e201",
		"name": "Adjutor API Service",
		"description": "Adjutor is the API service from Lendsqr provided via RESTful APIs. The services include the following:\n\n- Authorizing direct debit, with consent, for repayments\n- Getting the bank accounts, with consent, tied to a customer's BVN\n- Matching a customer image against what's on their BVN\n- Getting the name and details of a bank account number\n- Getting credit information about a borrower\n- Getting \"probable\" fraud information from our Karma blacklist\n- Accessing credit performance information, for a borrower, from the Lendsqr ecosystem\n    \n\n## Getting Started\n\nTo have access to our APIs is easy.\n\n1. [Sign up for a Lendsqr Adjutor account](https://app.adjutor.io/signup?source=adjutor-api-documentation)\n    \n2. Then create an app and select the services required fror the app\n    \n\nðŸ“º [You can watch a quick video guide of how to get your API key](https://vimeo.com/916390665/9ab2925a54?share=copy).\n\n## Terms of Use\n\nTo use Lendsqr Adjutor APIs, you must agree to our terms of use. These terms outline the conditions under which you may access and use our API. Please review these terms carefully before using our API. If you have any questions or concerns about these terms, please contact us at [support@lendsqr.com](https://mailto:support@lendsqr.com). [https://adjutor.io/privacy#terms-of-use](https://adjutor.io/privacy#terms-of-use)\n\n[You read about our terms here](https://adjutor.io/privacy#terms-of-use).\n\n## Getting Support\n\nIf you require assistance at any time when using this documentation or the services, please email [support@lendsqr.com](https://mailto:support@lendsqr.com) and someone would be in touch with you as soon as possible. If you are currently using Lendsqr to lend, you can also contact your account manager at [growth@lendsqr.com](https://mailto:growth@lendsqr.com).\n\n---\n\n# Authentication\n\nAuthentication to the Adjutor API service is performed with the API key. Every endpoint requires authentication, so you will need to add the following header to each request:\n\n`Authorization: Bearer`\n\n`base_url: https://adjutor.lendsqr.com/v2/`\n\n---\n\n# Data Types\n\nAll of the API responses returned are in JSON format, with these data types defined below:\n\n| Type | Description |\n| --- | --- |\n| `string` | A UTF-8 encoded string |\n| `number` | An integer |\n| `datetime` | An ISO8601 encoded DateTime. All datetimes are returned in UTC with offset +00:00 |\n| `decimal` | All monetary values are returned with up to two decimal places and may be positive (20.78) or negative (-32.50) |\n\n# Data Length\n\n| Type | Description | Length |\n| --- | --- | --- |\n| Text fields | `string` | max-length 255 characters |\n| BVN | `integers` starting with 1 or 2 | 11 digits. |\n| Account Number | `integers` | 10 digits. |\n\n---\n\n# Response\n\n| Field | Type | Description |\n| --- | --- | --- |\n| data | `array` | The actual data items you have requested |\n| meta | `object` | Key/value information that is not essential to understanding the resources returned but offers additional detail |\n\n# Meta\n\n| Field | Type | Description |\n| --- | --- | --- |\n| cost | `number` | The cost for the API call in Naira |\n| balance | `number` | The remaining balance in your service wallet in Naira |\n\n---\n\n# Errors\n\nErrors are expressed as a combination of HTTP status codes and an accompanying JSON body providing required detail where possible. You should be able to rely on the HTTP status code alone to determine the cause of the problem.\n\n## Error Response Fields\n\n| Field | Type |\n| --- | --- |\n| message | `string` A human-readable message as to the specifics of the problem. For example, it may contain a detail description of what caused the problem |\n| status number | The HTTP status code used in the response |\n| error_code | `number` |\n\n---",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "26288096"
	},
	"item": [
		{
			"name": "Validation",
			"item": [
				{
					"name": "Verify Customer Bank Account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Postive Test Cases\r",
									"pm.test(\"Status code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has correct structure\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('status');\r",
									"    pm.expect(jsonData).to.have.property('message');\r",
									"    pm.expect(jsonData).to.have.property('data');\r",
									"    pm.expect(jsonData).to.have.property('meta');\r",
									"});\r",
									"\r",
									"pm.test(\"Data contains correct fields\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data).to.have.property('bank_code');\r",
									"    pm.expect(jsonData.data).to.have.property('account_name');\r",
									"    pm.expect(jsonData.data).to.have.property('account_number');\r",
									"    pm.expect(jsonData.data).to.have.property('bvn');\r",
									"});\r",
									"\r",
									"pm.test(\"BVN is masked correctly\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data.bvn).to.match(/^\\d{2}0{7}\\d{2}$/);\r",
									"});\r",
									"\r",
									"pm.test(\"Meta contains balance and cost\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.meta).to.have.property('cost');\r",
									"    pm.expect(jsonData.meta).to.have.property('balance');\r",
									"});\r",
									"\r",
									"// // For negative cases\r",
									"// pm.test(\"Error response structure is correct\", function () {\r",
									"//     if (pm.response.code !== 200) {\r",
									"//         const jsonData = pm.response.json();\r",
									"//         pm.expect(jsonData).to.have.property('message');\r",
									"//         pm.expect(jsonData).to.have.property('status');\r",
									"//         pm.expect(jsonData.meta).to.have.property('balance');\r",
									"//     }\r",
									"// });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"account_number\": \"0235802018\",\n    \"bank_code\": \"058\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}verification/bankaccount",
							"host": [
								"{{base_url}}verification"
							],
							"path": [
								"bankaccount"
							]
						},
						"description": "This endpoint is used for verification of a customer's bank account.\n\n#### Payload\n\n`account_number`: `required` account number to be verified\n\n`bank_code`: `required` the bank code for the account number\n\n#### Response Fields\n\n| Field | Type | Description |\n| --- | --- | --- |\n| bank_code | `string` | Central Bank of Nigeria code identifying the bank (e.g., \"058\") |\n| bank_name | `string` | Name of the bank (e.g., \"Example Bank Plc\") |\n| account_name | `string` | Name associated with the account (e.g., \"DOE JOHN\") |\n| account_number | `string` | Account number (e.g., \"0425571111\") |\n| bvn | `string` | Bank Verification Number. The middle 7 numbers are masked with 0s (e.g., \"22000000021\") |"
					},
					"response": [
						{
							"name": "Verify Customer Bank Account",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"account_number\": \"0425571111\",\n    \"bank_code\": \"058\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}verification/bankaccount/bvn",
									"host": [
										"{{base_url}}verification"
									],
									"path": [
										"bankaccount",
										"bvn"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Thu, 10 Aug 2023 14:43:21 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "X-Request-ID",
									"value": "45a5849d-e413-474f-966d-ac800803a5f8"
								},
								{
									"key": "Last-Modified",
									"value": "Thu, 10 Aug 2023 14:43:21 GMT"
								},
								{
									"key": "ETag",
									"value": "W/\"c9-19Gwq+rB7O302vWla1jPDh/+TTI\""
								},
								{
									"key": "CF-Cache-Status",
									"value": "DYNAMIC"
								},
								{
									"key": "Server",
									"value": "cloudflare"
								},
								{
									"key": "CF-RAY",
									"value": "7f4902b9bb13046b-CDG"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip"
								}
							],
							"cookie": [],
							"body": "{\n    \"status\": \"success\",\n    \"message\": \"Successful\",\n    \"data\": {\n        \"bank_code\": \"058\",\n        \"account_name\": \"DOE JOHN\",\n        \"account_number\": \"0425571111\",\n        \"bvn\": \"22000000021\"\n    },\n    \"meta\": {\n        \"cost\": 10,\n        \"balance\": 1245\n    }\n}"
						}
					]
				},
				{
					"name": "Check for Borrower on Ecosystem",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Positive Test Cases\r",
									"pm.test(\"Status code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has correct structure\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('status');\r",
									"    pm.expect(jsonData).to.have.property('message');\r",
									"    pm.expect(jsonData).to.have.property('data');\r",
									"    pm.expect(jsonData).to.have.property('meta');\r",
									"});\r",
									"\r",
									"pm.test(\"Data contains correct fields\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    const requiredFields = [\r",
									"        'bvn', 'first_name', 'last_name', 'bvn_phone_number', 'date_of_birth',\r",
									"        'age', 'unique_phone_numbers', 'phone_number', 'unique_emails', 'email',\r",
									"        'gender', 'lenders', 'first_account', 'last_account', 'failed_selfie_bvn_check',\r",
									"        'lending_lenders', 'loans', 'loan_amount', 'loan_amount_minimum',\r",
									"        'loan_amount_maximum', 'loan_amount_average', 'settled_loans',\r",
									"        'settled_loan_amount', 'settled_loan_amount_paid', 'running_loans',\r",
									"        'running_loan_amount', 'past_due_loans', 'past_due_loan_amount',\r",
									"        'past_due_loan_amount_due', 'penalty', 'penalty_paid', 'delayed_paid_loans',\r",
									"        'delayed_paid_loan_amount', 'delayed_paid_loans_trials',\r",
									"        'delayed_paid_loans_avg', 'delayed_paid_loans_trials_max',\r",
									"        'delayed_paid_loans_trials_min', 'first_loan_date', 'last_loan_date',\r",
									"        'loan_requests', 'failed_loan_requests', 'logins', 'first_login',\r",
									"        'last_login', 'unique_login_ips', 'unique_device_ids', 'distinct_mobile_os',\r",
									"        'duplicated_devices', 'shared_device_users', 'credit_delinquency', 'processed_on'\r",
									"    ];\r",
									"    \r",
									"    requiredFields.forEach(field => {\r",
									"        pm.expect(jsonData.data).to.have.property(field);\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"BVN matches the request\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data.bvn).to.eql(pm.request.url.path[3]);\r",
									"});\r",
									"\r",
									"pm.test(\"Date fields are in correct format\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    const dateFields = ['date_of_birth', 'first_account', 'last_account', 'first_loan_date', 'last_loan_date', 'first_login', 'last_login', 'processed_on'];\r",
									"    \r",
									"    dateFields.forEach(field => {\r",
									"        pm.expect(jsonData.data[field]).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/);\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Numeric fields are non-negative\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    const numericFields = [\r",
									"        'age', 'unique_phone_numbers', 'unique_emails', 'lenders',\r",
									"        'failed_selfie_bvn_check', 'lending_lenders', 'loans', 'loan_amount',\r",
									"        'loan_amount_minimum', 'loan_amount_maximum', 'loan_amount_average',\r",
									"        'settled_loans', 'settled_loan_amount', 'settled_loan_amount_paid',\r",
									"        'running_loans', 'running_loan_amount', 'past_due_loans',\r",
									"        'past_due_loan_amount', 'past_due_loan_amount_due', 'penalty',\r",
									"        'penalty_paid', 'delayed_paid_loans', 'delayed_paid_loan_amount',\r",
									"        'delayed_paid_loans_trials', 'delayed_paid_loans_avg',\r",
									"        'delayed_paid_loans_trials_max', 'delayed_paid_loans_trials_min',\r",
									"        'loan_requests', 'failed_loan_requests', 'logins', 'unique_login_ips',\r",
									"        'unique_device_ids', 'distinct_mobile_os', 'duplicated_devices',\r",
									"        'shared_device_users', 'credit_delinquency'\r",
									"    ];\r",
									"    \r",
									"    numericFields.forEach(field => {\r",
									"        pm.expect(jsonData.data[field]).to.be.at.least(0);\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Meta contains balance and cost\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.meta).to.have.property('cost');\r",
									"    pm.expect(jsonData.meta).to.have.property('balance');\r",
									"});\r",
									"\r",
									"// // For negative cases\r",
									"// pm.test(\"Error response structure is correct\", function () {\r",
									"//     if (pm.response.code !== 200) {\r",
									"//         const jsonData = pm.response.json();\r",
									"//         pm.expect(jsonData).to.have.property('message');\r",
									"//         pm.expect(jsonData).to.have.property('status');\r",
									"//         pm.expect(jsonData.meta).to.have.property('balance');\r",
									"//     }\r",
									"// });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}verification/ecosystem/22340758896",
							"host": [
								"{{base_url}}verification"
							],
							"path": [
								"ecosystem",
								"22340758896"
							]
						},
						"description": "The Lendsqr ecosystem provides an aggregated view of borrowers which lenders could have access to make decisions. To access this service, the lender must provide an evidence of customer explicit consent.\n\nFurthermore, where it is proven that a consent was never provided, the lender would be liable for all legal cost required to ameliorate issues that may arise. Lender may also be removed from the platform.\n\nThis endpoint is used to verify if a borrower exists on the Lendsqr ecosystem.\n\n#### Path Variables\n\n`bvn`: `required` BVN no. of the person to be checked.\n\n#### Response Fields\n\n| Field | Type | Description |\n| --- | --- | --- |\n| bvn | `string` | Bank Verification Number (e.g., \"22536011111\") |\n| first_name | `string` | First name of the individual (e.g., \"JANE\") |\n| last_name | `string` | Last name of the individual (e.g., \"DOE\") |\n| bvn_phone_number | `string` | Phone number registered with BVN (e.g., \"07062561111\") |\n| date_of_birth | `date` | Date of birth in ISO format (e.g., \"1997-09-10\") |\n| age | `integer` | Age of the individual (e.g., 25) |\n| unique_phone_numbers | `integer` | Count of unique phone numbers (e.g., 0) |\n| phone_number | `string` | Primary phone number (e.g., \"07062561111\") |\n| unique_emails | `integer` | Count of unique email addresses (e.g., 0) |\n| email | `string` | Email address (e.g., \"[janedoe@gmail.com](https://mailto:janedoe@gmail.com)\") |\n| gender | `string` | Gender of the individual (e.g., \"Female\") |\n| lenders | `integer` | Number of lenders interacted with (e.g., 1) |\n| first_account | `date` | Date of first account creation in ISO format (e.g., \"2020-11-16\") |\n| last_account | `date` | Date of last account creation in ISO format (e.g., \"2023-06-26\") |\n| failed_selfie_bvn_check | `integer` | Number of failed BVN selfie checks (e.g., 0) |\n| lending_lenders | `integer` | Number of lending lenders (e.g., 0) |\n| loans | `integer` | Total number of loans (e.g., 0) |\n| loan_amount | `integer` | Total loan amount (e.g., 0) |\n| loan_amount_minimum | `integer` | Minimum loan amount (e.g., 0) |\n| loan_amount_maximum | `integer` | Maximum loan amount (e.g., 150000) |\n| loan_amount_average | `float` | Average loan amount (e.g., 5892.954545) |\n| settled_loans | `integer` | Number of settled loans (e.g., 0) |\n| settled_loan_amount | `integer` | Amount of settled loans (e.g., 0) |\n| settled_loan_amount_paid | `integer` | Amount paid for settled loans (e.g., 0) |\n| running_loans | `integer` | Number of running loans (e.g., 0) |\n| running_loan_amount | `integer` | Amount of running loans (e.g., 0) |\n| past_due_loans | `integer` | Number of past due loans (e.g., 0) |\n| past_due_loan_amount | `integer` | Amount of past due loans (e.g., 0) |\n| past_due_loan_amount_due | `integer` | Amount due for past due loans (e.g., 2000) |\n| penalty | `integer` | Penalty amount (e.g., 0) |\n| penalty_paid | `integer` | Penalty amount paid (e.g., 0) |\n| delayed_paid_loans | `integer` | Number of delayed paid loans (e.g., 0) |\n| delayed_paid_loan_amount | `integer` | Amount of delayed paid loans (e.g., 0) |\n| delayed_paid_loans_trials | `integer` | Trials for delayed paid loans (e.g., 0) |\n| delayed_paid_loans_avg | `integer` | Average trials for delayed paid loans (e.g., 0) |\n| delayed_paid_loans_trials_max | `integer` | Maximum trials for delayed paid loans (e.g., 0) |\n| delayed_paid_loans_trials_min | `integer` | Minimum trials for delayed paid loans (e.g., 0) |\n| first_loan_date | `date` | Date of first loan in ISO format (e.g., \"2020-12-24\") |\n| last_loan_date | `date` | Date of last loan in ISO format (e.g., \"2023-07-20\") |\n| loan_requests | `integer` | Number of loan requests (e.g., 0) |\n| failed_loan_requests | `integer` | Number of failed loan requests (e.g., 0) |\n| logins | `integer` | Number of logins (e.g., 115) |\n| first_login | `date` | Date of first login in ISO format (e.g., \"2023-06-01\") |\n| last_login | `date` | Date of last login in ISO format (e.g., \"2023-08-08\") |\n| unique_login_ips | `integer` | Count of unique login IPs (e.g., 0) |\n| unique_device_ids | `integer` | Count of unique device IDs (e.g., 0) |\n| distinct_mobile_os | `integer` | Count of distinct mobile OS used (e.g., 0) |\n| duplicated_devices | `integer` | Count of duplicated devices (e.g., 0) |\n| shared_device_users | `integer` | Count of shared device users (e.g., 0) |\n| credit_delinquency | `integer` | Credit delinquency flag (e.g., 0) |\n| processed_on | `date` | Date when the data was processed in ISO format (e.g., \"2023-08-08\") |"
					},
					"response": [
						{
							"name": "Check for Borrower on Ecosystem",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}verification/ecosystem/:bvn",
									"host": [
										"{{base_url}}verification"
									],
									"path": [
										"ecosystem",
										":bvn"
									],
									"variable": [
										{
											"key": "bvn",
											"value": "22153475955"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Tue, 08 Aug 2023 14:28:56 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "X-Request-ID",
									"value": "a7855073-2a36-4924-a21f-077ef89219c0"
								},
								{
									"key": "Last-Modified",
									"value": "Tue, 08 Aug 2023 14:28:55 GMT"
								},
								{
									"key": "ETag",
									"value": "W/\"591-Cd5yroepYTa3PyDTbhzMyhKotAE\""
								},
								{
									"key": "CF-Cache-Status",
									"value": "DYNAMIC"
								},
								{
									"key": "Server",
									"value": "cloudflare"
								},
								{
									"key": "CF-RAY",
									"value": "7f3872d4eeb8d430-LOS"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip"
								}
							],
							"cookie": [],
							"body": "{\n    \"status\": \"success\",\n    \"message\": \"Successful\",\n    \"data\": {\n        \"bvn\": \"22536011111\",\n        \"first_name\": \"JANE\",\n        \"last_name\": \"DOE\",\n        \"bvn_phone_number\": \"07062561111\",\n        \"date_of_birth\": \"1997-09-10T00:00:00.000Z\",\n        \"age\": 25,\n        \"unique_phone_numbers\": 0,\n        \"phone_number\": \"07062561111\",\n        \"unique_emails\": 0,\n        \"email\": \"janedoe@gmail.com\",\n        \"gender\": \"Female\",\n        \"lenders\": 1,\n        \"first_account\": \"2020-11-16T10:49:57.000Z\",\n        \"last_account\": \"2023-06-26T07:56:37.000Z\",\n        \"failed_selfie_bvn_check\": 0,\n        \"lending_lenders\": 0,\n        \"loans\": 0,\n        \"loan_amount\": 0,\n        \"loan_amount_minimum\": 0,\n        \"loan_amount_maximum\": 150000,\n        \"loan_amount_average\": 5892.954545,\n        \"settled_loans\": 0,\n        \"settled_loan_amount\": 0,\n        \"settled_loan_amount_paid\": 0,\n        \"running_loans\": 0,\n        \"running_loan_amount\": 0,\n        \"past_due_loans\": 0,\n        \"past_due_loan_amount\": 0,\n        \"past_due_loan_amount_due\": 2000,\n        \"penalty\": 0,\n        \"penalty_paid\": 0,\n        \"delayed_paid_loans\": 0,\n        \"delayed_paid_loan_amount\": 0,\n        \"delayed_paid_loans_trials\": 0,\n        \"delayed_paid_loans_avg\": 0,\n        \"delayed_paid_loans_trials_max\": 0,\n        \"delayed_paid_loans_trials_min\": 0,\n        \"first_loan_date\": \"2020-12-24T07:54:37.000Z\",\n        \"last_loan_date\": \"2023-07-20T11:38:02.000Z\",\n        \"loan_requests\": 0,\n        \"failed_loan_requests\": 0,\n        \"logins\": 115,\n        \"first_login\": \"2023-06-01T12:32:27.000Z\",\n        \"last_login\": \"2023-08-08T08:23:49.000Z\",\n        \"unique_login_ips\": 0,\n        \"unique_device_ids\": 0,\n        \"distinct_mobile_os\": 0,\n        \"duplicated_devices\": 0,\n        \"shared_device_users\": 0,\n        \"credit_delinquency\": 0,\n        \"processed_on\": \"2023-08-08T14:02:33.000Z\"\n    },\n    \"meta\": {\n        \"cost\": 25,\n        \"balance\": 1590\n    }\n}"
						}
					]
				}
			],
			"description": "The Validation APIs are resources and tools for validating customer information. These validation processes make use of APIs that allow you to confirm the accuracy of customer information using their Bank Verification Numbers (BVNs), email addresses, or phone numbers.\n\nThe APIs are designed to help you ensure that customer information is accurate and up-to-date, providing you with a reliable and efficient method for validating customer data."
		},
		{
			"name": "Credit Bureaus",
			"item": [
				{
					"name": "Get Credit Report from CRC Credit Bureau",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Positive Test Cases\r",
									"pm.test(\"Status code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has correct structure\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('status');\r",
									"    pm.expect(jsonData).to.have.property('message');\r",
									"    pm.expect(jsonData).to.have.property('data');\r",
									"    pm.expect(jsonData).to.have.property('meta');\r",
									"});\r",
									"\r",
									"pm.test(\"Data contains correct fields\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data).to.have.property('consdisclaimer');\r",
									"    pm.expect(jsonData.data).to.have.property('consumer_relation');\r",
									"    pm.expect(jsonData.data).to.have.property('last_checked_date');\r",
									"    pm.expect(jsonData.data).to.have.property('credit_nano_summary');\r",
									"    pm.expect(jsonData.data).to.have.property('mfcredit_nano_summary');\r",
									"    pm.expect(jsonData.data).to.have.property('mgcredit_nano_summary');\r",
									"    pm.expect(jsonData.data).to.have.property('nano_consumer_profile');\r",
									"});\r",
									"\r",
									"pm.test(\"BVN in response matches request\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    const requestBVN = pm.request.url.path[3];\r",
									"    pm.expect(jsonData.data.nano_consumer_profile.consumer_details.identification.id_value).to.eql(requestBVN);\r",
									"});\r",
									"\r",
									"pm.test(\"Meta contains cost and balance\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.meta).to.have.property('cost');\r",
									"    pm.expect(jsonData.meta).to.have.property('balance');\r",
									"});\r",
									"\r",
									"// // For negative cases\r",
									"// pm.test(\"Error response structure is correct\", function () {\r",
									"//     if (pm.response.code !== 200) {\r",
									"//         const jsonData = pm.response.json();\r",
									"//         pm.expect(jsonData).to.have.property('message');\r",
									"//         pm.expect(jsonData).to.have.property('status');\r",
									"//         pm.expect(jsonData.meta).to.have.property('balance');\r",
									"//     }\r",
									"// });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{base_url}}creditbureaus/crc/22340758808",
							"host": [
								"{{base_url}}creditbureaus"
							],
							"path": [
								"crc",
								"22340758808"
							]
						},
						"description": "This request is used to check the CRC database for the credit history of a customer using their BVN.\n\n#### Path Variables\n\n`bvn`: `required` The BVN of the customer."
					},
					"response": [
						{
							"name": "Get Credit Report from CRC Credit Bureau",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}creditbureaus/crc/:bvn",
									"host": [
										"{{base_url}}creditbureaus"
									],
									"path": [
										"crc",
										":bvn"
									],
									"variable": [
										{
											"key": "bvn",
											"value": "22293381111"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Tue, 08 Aug 2023 14:45:13 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "X-Request-ID",
									"value": "b0a64f17-3b9c-486a-bcd9-238c74c8dc6b"
								},
								{
									"key": "Last-Modified",
									"value": "Tue, 08 Aug 2023 14:45:11 GMT"
								},
								{
									"key": "ETag",
									"value": "W/\"3a9-O71eH/thvISxq/G7zT9AeNi1Bl4\""
								},
								{
									"key": "CF-Cache-Status",
									"value": "DYNAMIC"
								},
								{
									"key": "Server",
									"value": "cloudflare"
								},
								{
									"key": "CF-RAY",
									"value": "7f388aa9590fc4fc-LOS"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip"
								}
							],
							"cookie": [],
							"body": "{\n    \"status\": \"success\",\n    \"message\": \"Successful\",\n    \"data\": {\n        \"consdisclaimer\": {\n            \"getdisclaimercontent\": {\n                \"_x0031_\": \"1\"\n            }\n        },\n        \"consumer_relation\": \"\",\n        \"last_checked_date\": \"2023-06-29 12:00:40\",\n        \"credit_nano_summary\": {\n            \"summary\": {\n                \"last_reported_date\": \"31-MAY-2023\",\n                \"has_creditfacilities\": \"YES\",\n                \"no_of_delinqcreditfacilities\": \"2\"\n            }\n        },\n        \"mfcredit_nano_summary\": {\n            \"summary\": {\n                \"last_reported_date\": \"31-MAY-2023\",\n                \"has_creditfacilities\": \"YES\",\n                \"no_of_delinqcreditfacilities\": \"1\"\n            }\n        },\n        \"mgcredit_nano_summary\": {\n            \"summary\": {\n                \"has_creditfacilities\": \"NO\",\n                \"no_of_delinqcreditfacilities\": \"0\"\n            }\n        },\n        \"nano_consumer_profile\": {\n            \"consumer_details\": {\n                \"name\": \"JOHN DOE\",\n                \"ruid\": \"1112020002201111\",\n                \"gender\": \"001\",\n                \"last_name\": \"DOE\",\n                \"first_name\": \"JOHN\",\n                \"citizenship\": \"NG\",\n                \"date_of_birth\": \"01-OCT-1960\",\n                \"identification\": {\n                    \"ruid\": \"1112020002201111\",\n                    \"id_value\": \"22293381111\",\n                    \"source_id\": \"BVN\",\n                    \"id_display_name\": \"Business Verification Number\"\n                }\n            }\n        }\n    },\n    \"meta\": {\n        \"cost\": 100,\n        \"balance\": 1355\n    }\n}"
						}
					]
				},
				{
					"name": "Get Credit Report from FirstCentral Credit Bureau",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Positive Test Case\r",
									"pm.test(\"Status code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has correct structure\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('status');\r",
									"    pm.expect(jsonData).to.have.property('message');\r",
									"    pm.expect(jsonData).to.have.property('data');\r",
									"    pm.expect(jsonData).to.have.property('meta');\r",
									"});\r",
									"\r",
									"pm.test(\"Data contains correct sections\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    const sections = ['SubjectList', 'PersonalDetailsSummary', 'CreditSummary', 'PerformanceClassification', 'EnquiryDetails'];\r",
									"    sections.forEach(section => {\r",
									"        pm.expect(jsonData.data.some(item => item.hasOwnProperty(section))).to.be.true;\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"BVN in response matches request\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    const requestBVN = pm.request.url.path[3];\r",
									"    const personalDetails = jsonData.data.find(item => item.PersonalDetailsSummary);\r",
									"    pm.expect(personalDetails.PersonalDetailsSummary[0].BankVerificationNo).to.eql(requestBVN);\r",
									"});\r",
									"\r",
									"pm.test(\"Meta contains balance and cost\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.meta).to.have.property('cost');\r",
									"    pm.expect(jsonData.meta).to.have.property('balance');\r",
									"});\r",
									"\r",
									"// // For negative cases\r",
									"// pm.test(\"Error response structure is correct\", function () {\r",
									"//     if (pm.response.code !== 200) {\r",
									"//         const jsonData = pm.response.json();\r",
									"//         pm.expect(jsonData).to.have.property('message');\r",
									"//         pm.expect(jsonData).to.have.property('status');\r",
									"//         pm.expect(jsonData.meta).to.have.property('balance');\r",
									"//     }\r",
									"// });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}creditbureaus/firstcentral/22340758896",
							"host": [
								"{{base_url}}creditbureaus"
							],
							"path": [
								"firstcentral",
								"22340758896"
							]
						},
						"description": "This request is used to check the CRC database for the credit history of a customer using their BVN.\n\n#### Path Variables\n\n`bvn`: `required` The BVN of the customer."
					},
					"response": [
						{
							"name": "Get Credit Report from FirstCentral Credit Bureau",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}creditbureaus/firstcentral/:bvn",
									"host": [
										"{{base_url}}creditbureaus"
									],
									"path": [
										"firstcentral",
										":bvn"
									],
									"variable": [
										{
											"key": "bvn",
											"value": "22293381111"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Mon, 14 Aug 2023 13:26:10 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "X-Request-ID",
									"value": "215fcd37-0d7f-4fc8-9031-7fa20e55bad0"
								},
								{
									"key": "Last-Modified",
									"value": "Mon, 14 Aug 2023 13:26:10 GMT"
								},
								{
									"key": "ETag",
									"value": "W/\"5da-eIapFMBHh+VQsgkRqx4HYnwZad4\""
								},
								{
									"key": "CF-Cache-Status",
									"value": "DYNAMIC"
								},
								{
									"key": "Server",
									"value": "cloudflare"
								},
								{
									"key": "CF-RAY",
									"value": "7f698727981103d6-LIS"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip"
								}
							],
							"cookie": [],
							"body": "{\n    \"status\": \"success\",\n    \"message\": \"Successful\",\n    \"data\": [\n        {\n            \"SubjectList\": [\n                {\n                    \"Reference\": \"2663443\",\n                    \"ConsumerID\": \"2663443\",\n                    \"SearchOutput\": \"DOE JANE, dantata estate kubwa abuja\"\n                }\n            ]\n        },\n        {\n            \"PersonalDetailsSummary\": [\n                {\n                    \"Gender\": \"Female\",\n                    \"Header\": \"PERSONAL DETAILS SUMMARY: DOE JANE\",\n                    \"Surname\": \"DOE\",\n                    \"BirthDate\": \"19/03/1997\",\n                    \"FirstName\": \"JANE\",\n                    \"OtheridNo\": \"\",\n                    \"CellularNo\": \"2348169591111\",\n                    \"ConsumerID\": \"2663443\",\n                    \"Dependants\": \"0\",\n                    \"OtherNames\": \"\",\n                    \"PassportNo\": null,\n                    \"PencomIDNo\": \"\",\n                    \"Nationality\": \"Nigeria\",\n                    \"ReferenceNo\": null,\n                    \"EmailAddress\": \"\",\n                    \"NationalIDNo\": \"\",\n                    \"MaritalStatus\": null,\n                    \"EmployerDetail\": null,\n                    \"PostalAddress1\": \"DANTATA ESTATE ABUJA FEDERAL CAPITAL TERRITORY\",\n                    \"PostalAddress2\": \"15\",\n                    \"PostalAddress3\": \"\",\n                    \"PostalAddress4\": \" Nigeria\",\n                    \"HomeTelephoneNo\": \"2348169591111\",\n                    \"WorkTelephoneNo\": \"2348169591111\",\n                    \"DriversLicenseNo\": null,\n                    \"PropertyOwnedType\": \"\",\n                    \"BankVerificationNo\": \"22293381111\",\n                    \"ResidentialAddress1\": \"10nasiru dantata estate kubwa abuja\",\n                    \"ResidentialAddress2\": \"\",\n                    \"ResidentialAddress3\": \"\",\n                    \"ResidentialAddress4\": \" \"\n                }\n            ]\n        },\n        {\n            \"CreditSummary\": [\n                {\n                    \"NumberofAccountsInBadStanding\": \"0\",\n                    \"TotalNumberOfAccountsReported\": \"6\",\n                    \"NumberOfAccountsInGoodStanding\": \"6\"\n                }\n            ]\n        },\n        {\n            \"PerformanceClassification\": [\n                {\n                    \"NoOfLoansLost\": \"0\",\n                    \"NoOfLoansDoubtful\": \"0\",\n                    \"NoOfLoansPerforming\": \"6\",\n                    \"NoOfLoansSubstandard\": \"1\"\n                }\n            ]\n        },\n        {\n            \"EnquiryDetails\": [\n                {\n                    \"ProductID\": \"63\",\n                    \"MatchingRate\": \"90\",\n                    \"SubscriberEnquiryEngineID\": \"179484634\",\n                    \"SubscriberEnquiryResultID\": \"22059650\"\n                }\n            ]\n        }\n    ],\n    \"meta\": {\n        \"cost\": 100,\n        \"balance\": 1025\n    }\n}"
						}
					]
				}
			],
			"description": "The Credit Bureaus folder contains resources and tools for accessing credit information through credit bureau integrations. Lendsqr is integrated with two of the three major credit bureaus in Nigeria, allowing you to make API calls to these bureaus to check the credit history of customers. This folder provides a convenient way to gather credit information and make informed lending decisions."
		},
		{
			"name": "Decisioning",
			"item": [
				{
					"name": "Get Decision Models",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// DEC_001: Get Decision Models--Positive Test Case\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains array of decision models\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data).to.be.an('array');\r",
									"    pm.expect(jsonData.data.length).to.be.at.least(1);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains data information\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data[0]).to.have.property('id');\r",
									"    pm.expect(jsonData.data[0]).to.have.property('country');\r",
									"    pm.expect(jsonData.data[1]).to.have.property('id');\r",
									"    pm.expect(jsonData.data[1]).to.have.property('org_id');\r",
									"});\r",
									"\r",
									"\r",
									"// // DEC_002: Get Decision Models (Negative - Invalid API key)\r",
									"// pm.test(\"Status code is 401 for invalid API key\", function () {\r",
									"//     pm.response.to.have.status(401);\r",
									"// });\r",
									"\r",
									"// pm.test(\"Error message indicates invalid authentication\", function () {\r",
									"//     var jsonData = pm.response.json();\r",
									"//     pm.expect(jsonData.message).to.include('invalid authentication');\r",
									"// });\r",
									"\r",
									"// // DEC_003: Get Decision Models (Edge case - Empty list)\r",
									"// pm.test(\"Status code is 200 for empty list\", function () {\r",
									"//     pm.response.to.have.status(200);\r",
									"// });\r",
									"\r",
									"// pm.test(\"Response contains empty array\", function () {\r",
									"//     var jsonData = pm.response.json();\r",
									"//     pm.expect(jsonData.data).to.be.an('array');\r",
									"//     pm.expect(jsonData.data).to.be.empty;\r",
									"// });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}decisioning/models",
							"host": [
								"{{base_url}}decisioning"
							],
							"path": [
								"models"
							]
						},
						"description": "This endpoint fetches all the decision models that have been configured for your profile. This would allow you to programmatically iterate and select."
					},
					"response": []
				},
				{
					"name": "Get Decision Model Details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// DEC_004: Get Decision Model Details--Positive Test Case\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains model details\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data).to.be.an('object');\r",
									"    pm.expect(jsonData.data).to.have.property('id');\r",
									"    pm.expect(jsonData.data).to.have.property('settings');\r",
									"});\r",
									"\r",
									"// // DEC_005: Get Decision Model Details (Negative - Non-existent model)\r",
									"// pm.test(\"Status code is 404 for non-existent model\", function () {\r",
									"//     pm.response.to.have.status(404);\r",
									"// });\r",
									"\r",
									"// pm.test(\"Error message indicates model not found\", function () {\r",
									"//     var jsonData = pm.response.json();\r",
									"//     pm.expect(jsonData.message).to.include('model not found');\r",
									"// });\r",
									"\r",
									"// // DEC_006: Get Decision Model Details (Negative - Invalid model ID format)\r",
									"// pm.test(\"Status code is 400 for invalid model ID format\", function () {\r",
									"//     pm.response.to.have.status(400);\r",
									"// });\r",
									"\r",
									"// pm.test(\"Error message indicates invalid model ID format\", function () {\r",
									"//     var jsonData = pm.response.json();\r",
									"//     pm.expect(jsonData.message).to.include('invalid model ID format');\r",
									"// });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}decisioning/models/8475/settings",
							"host": [
								"{{base_url}}decisioning"
							],
							"path": [
								"models",
								"8475",
								"settings"
							]
						},
						"description": "This endpoint is used to obtain the details of a Decision Model.\n\n#### Path Variables\n\n`id`: `required` The id of the decison model.decision"
					},
					"response": []
				}
			],
			"description": "Risk Acceptance Criteria (RAC) is used as a loan screening tool to guide credit extension and how much risk is acceptable or tolerable. These RAC are implemented with the decisioning APIs.\n\nThese APIs provide quick, easy, and cost-effective solutions for making informed decisions during your loan decision processes, allowing you to make confident and efficient choices with ease.\n\nTo use the Decisioning APIs, you must have designed your decision models and configure them within the Lendsqr admin console.\n\nDecision Models are a living process and lenders are advised to constantly iterate these models as customer behaviors evolve.\n\nCreating a good decision model can be complex, especially at the early stages. Deciding what to include or consider can be a head-scratching moment. If you require additional help on guidance regarding this, please email your account manager at [growth@lendsqr.com](https://mailto:growth@lendsqr.com) and we would be more than happy to help you think through this stage.\n\n[You can read more about our Decision Model at the Lendsqr Help Center](https://lendsqr.freshdesk.com/support/solutions/44000816023)."
		},
		{
			"name": "Embedded Loans and Payments",
			"item": [
				{
					"name": "Pay with wallet",
					"item": [
						{
							"name": "Initialize Payment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// PAY_001: Initialize Payment Positive Test Case\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains reference and URL\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"success\");\r",
											"    pm.expect(jsonData.data).to.have.property('reference');\r",
											"    pm.expect(jsonData.data).to.have.property('url');\r",
											"});\r",
											"\r",
											"// // PAY_002: Initialize Payment (Negative - Missing required field)\r",
											"// pm.test(\"Status code is 400 for missing required field\", function () {\r",
											"//     pm.response.to.have.status(400);\r",
											"// });\r",
											"\r",
											"// pm.test(\"Error message indicates missing required field\", function () {\r",
											"//     var jsonData = pm.response.json();\r",
											"//     pm.expect(jsonData.message).to.include('required field');\r",
											"// });\r",
											"\r",
											"// // PAY_003: Initialize Payment (Negative - Invalid amount)\r",
											"// pm.test(\"Status code is 400 for invalid amount\", function () {\r",
											"//     pm.response.to.have.status(400);\r",
											"// });\r",
											"\r",
											"// pm.test(\"Error message indicates invalid amount\", function () {\r",
											"//     var jsonData = pm.response.json();\r",
											"//     pm.expect(jsonData.message).to.include('invalid amount');\r",
											"// });\r",
											"\r",
											"// // PAY_004: Initialize Payment (Negative - Invalid API key)\r",
											"// pm.test(\"Status code is 401 for invalid API key\", function () {\r",
											"//     pm.response.to.have.status(401);\r",
											"// });\r",
											"\r",
											"// pm.test(\"Error message indicates invalid authentication\", function () {\r",
											"//     var jsonData = pm.response.json();\r",
											"//     pm.expect(jsonData.message).to.include('invalid authentication');\r",
											"// });"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer sk_test_5N5FcApMCqN0DsDH3r6Ve292Q2peJGC2ZIynMab0",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"amount\": 5000,\n    \"description\": \"Payment for beans, yam and egg\",\n    \"organization_id\": \"37a749d808e46495a8da1e5352d03cae\",\n    \"callback_url\": \"https://lendsqr.com\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}payments/initialize",
									"host": [
										"{{base_url}}payments"
									],
									"path": [
										"initialize"
									]
								},
								"description": "This endpoint generates the payment link that would open a web page that would allow customers to log into the lender's account and initiate the relevant payment.\n\nYou would provide us with a callback URL that would serve as a redirect for customers once payment has been made."
							},
							"response": [
								{
									"name": "Initialize Payment",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer sk_test_5N5FcApMCqN0DsDH3r6Ve292Q2peJGC2ZIynMab0",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"amount\": 5000,\n    \"description\": \"Payment for beans and egg\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}payments/initialize",
											"host": [
												"{{base_url}}payments"
											],
											"path": [
												"initialize"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "X-Powered-By",
											"value": "Express"
										},
										{
											"key": "X-Request-ID",
											"value": "b90557c9-1497-414f-86b4-9f89d3361e52"
										},
										{
											"key": "Last-Modified",
											"value": "Sun, 23 Jul 2023 18:55:19 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "108"
										},
										{
											"key": "ETag",
											"value": "W/\"6c-IGmND8VHD+WKmPUjHpwPnBLnwk8\""
										},
										{
											"key": "Date",
											"value": "Sun, 23 Jul 2023 18:55:20 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "{\n    \"status\": \"success\",\n    \"message\": \"Successful\",\n    \"data\": {\n        \"reference\": \"9ZyuoKwn3ENs12YU\",\n        \"url\": \"9ZyuoKwn3ENs12YU\"\n    }\n}"
								}
							]
						},
						{
							"name": "Query Payment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// PAY_005: Query Payment (Positive Test Case)\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains payment details\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"success\");\r",
											"    pm.expect(jsonData.data).to.have.property('status');\r",
											"    pm.expect(jsonData.data).to.have.property('reference');\r",
											"    pm.expect(jsonData.data).to.have.property('amount');\r",
											"});\r",
											"\r",
											"// // PAY_006: Query Payment (Negative - Non-existent payment)\r",
											"// pm.test(\"Status code is 404 for non-existent payment\", function () {\r",
											"//     pm.response.to.have.status(404);\r",
											"// });\r",
											"\r",
											"// pm.test(\"Error message indicates payment not found\", function () {\r",
											"//     var jsonData = pm.response.json();\r",
											"//     pm.expect(jsonData.message).to.include('payment not found');\r",
											"// });\r",
											"\r",
											"// // PAY_007: Query Payment (Negative - Invalid reference format)\r",
											"// pm.test(\"Status code is 400 for invalid reference format\", function () {\r",
											"//     pm.response.to.have.status(400);\r",
											"// });\r",
											"\r",
											"// pm.test(\"Error message indicates invalid reference format\", function () {\r",
											"//     var jsonData = pm.response.json();\r",
											"//     pm.expect(jsonData.message).to.include('invalid reference format');\r",
											"// });"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer sk_test_5N5FcApMCqN0DsDH3r6Ve292Q2peJGC2ZIynMab0",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{base_url}}payments/yM8o4qsW1wkivQoe",
									"host": [
										"{{base_url}}payments"
									],
									"path": [
										"yM8o4qsW1wkivQoe"
									]
								},
								"description": "This endpoint is used to query the details of the payment made."
							},
							"response": [
								{
									"name": "Query Payment",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer sk_test_5N5FcApMCqN0DsDH3r6Ve292Q2peJGC2ZIynMab0",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{base_url}}payments/9ZyuoKwn3ENs12YU",
											"host": [
												"{{base_url}}payments"
											],
											"path": [
												"9ZyuoKwn3ENs12YU"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "X-Powered-By",
											"value": "Express"
										},
										{
											"key": "X-Request-ID",
											"value": "43840982-dee5-49a3-acda-4650c01a11cf"
										},
										{
											"key": "Last-Modified",
											"value": "Sun, 23 Jul 2023 18:56:43 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "369"
										},
										{
											"key": "ETag",
											"value": "W/\"171-zzSQFFLrRm98A9YAgrI4FQiBWHs\""
										},
										{
											"key": "Date",
											"value": "Sun, 23 Jul 2023 18:56:44 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "{\n    \"status\": \"success\",\n    \"message\": \"Successful\",\n    \"data\": {\n        \"id\": 3,\n        \"org_id\": 136,\n        \"distributor_id\": 2,\n        \"transaction_id\": null,\n        \"reference\": \"9ZyuoKwn3ENs12YU\",\n        \"amount\": 5000,\n        \"description\": \"Payment for beans and egg\",\n        \"callback_url\": null,\n        \"created_on\": \"2023-07-23T17:55:20.000Z\",\n        \"created_by\": null,\n        \"modified_on\": null,\n        \"modified_by\": null,\n        \"deleted_flag\": 0,\n        \"deleted_on\": null,\n        \"deleted_by\": null\n    }\n}"
								}
							]
						}
					],
					"description": "Our Pay with Wallet solution allows your customers to make payment for their purchases via various account holding platforms. This solution is viable to customers who have accounts with a lender, on the Lendsqr platform that is activated for this program."
				}
			],
			"description": "## Introduction\n\nEmbedded loans and payments offers third-party distributors with Lendsqr the option to offer loans and payment options to customers on their platform outside Lendsqr.\n\n## How it works\n\nEmbedded loans and payments is a way to ensure seamless experience for your customers via Lendsqr's services and lenders.\n\n### Embedded Loans\n\nWith embedded loans, you can fuel Buy-Now-Pay-Later projects or generic loan services on your platform. Lendsqr's lenders are equipped to perform adequate KYC and power the loans that you give to your customers to service their needs on your platform. In the case of BNPL projects, increase your checkout rate as customers are now ensure of loans to finance their purchases.\n\n### Embedded Payments\n\nWith embedded payments, customers don't need to get loans with a Lendsqr lender. Provided that you have established a relationship with one of our lenders, your customers can now easily pay for purchases using the funds in their account with your partnered lender. This will make payments and checkout on your platform super seamless and easy.\n\n**NOTE**: Embedded payments only serves for checkout services.\n\n## Getting started\n\n1. Sign up on pecunia.lendsqr.com and contact [api@lendsqr.com](https://) when done. Ensure you provide a valid business account during the sign up process as this will be the account payment will be made to.\n2. After contacting us, your profile would be set up as a distributor with Lendsqr.\n3. To test the APIs available, you would be provided with a test API key to carry out the integration.\n4. After confirmation of what you have implemented, your production API key will be sent to you over secure channels.\n    \n\n## Concepts to understand\n\n1. Third-party distributor: An external platform (not a Lendsqr lender) that wishes to offer their customers loans or payment options powered by a Lendsqr lender. This platform/partner could be an e-commerce platform wishing to offer BNPL opportunities to their customers with embedded loans or multiple check out options with embedded payment capabilities.\n2. Lender: This is a business that gives out loans via the Lendsqr platform.\n3. Customers: The end users on the distributor platform."
		},
		{
			"name": "Data for Lenders",
			"item": [
				{
					"name": "Options",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// DFL_001: Get Data Options Positive Test Case\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains array of data options\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.success).to.be.true;\r",
									"    pm.expect(jsonData.data).to.be.an('array').that.is.not.empty;\r",
									"});\r",
									"\r",
									"// // DFL_002: Get Data Options (Negative - Invalid API key)\r",
									"// pm.test(\"Status code is 401 for invalid API key\", function () {\r",
									"//     pm.response.to.have.status(401);\r",
									"// });\r",
									"\r",
									"// pm.test(\"Error message indicates invalid authentication\", function () {\r",
									"//     var jsonData = pm.response.json();\r",
									"//     pm.expect(jsonData.success).to.be.false;\r",
									"//     pm.expect(jsonData.message).to.include('invalid authentication');\r",
									"// });\r",
									"\r",
									"// DFL_003: Get Data Options (Positive - Check specific options)\r",
									"pm.test(\"Response contains expected data options\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var optionNames = jsonData.data.map(option => option.name);\r",
									"    pm.expect(optionNames).to.include.members(['Users', 'Loans', 'Transactions']);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}data/options",
							"host": [
								"{{base_url}}data"
							],
							"path": [
								"options"
							]
						},
						"description": "This endpoint is used to get the data options or sources available for a lender.\n\n#### Response Payload\n\n| Field | Type | Description |\n| --- | --- | --- |\n| name | `string` | \"Users\" |\n| description | `string` | \"Get details of all users that have signed up to the system. This may include users who have not completed their onboarding\" |\n| path | `string` | \"/users\" |"
					},
					"response": [
						{
							"name": "Data Options",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}data/options",
									"host": [
										"{{base_url}}data"
									],
									"path": [
										"options"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Wed, 28 Feb 2024 22:55:02 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "X-Request-ID",
									"value": "286bceb2-43a0-4cc6-a001-131f13a66e3c"
								},
								{
									"key": "Last-Modified",
									"value": "Wed, 28 Feb 2024 22:54:57 GMT"
								},
								{
									"key": "ETag",
									"value": "W/\"690-sCrGprb2Do2p61q0+9QpVPX9kU8\""
								},
								{
									"key": "CF-Cache-Status",
									"value": "DYNAMIC"
								},
								{
									"key": "Server",
									"value": "cloudflare"
								},
								{
									"key": "CF-RAY",
									"value": "85cc40948afa636a-LHR"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": true,\n    \"data\": [\n        {\n            \"name\": \"Users\",\n            \"description\": \"Get details of all users that have signed up to the system. This may include users who have not completed their onboarding\",\n            \"path\": \"/users\"\n        },\n        {\n            \"name\": \"Loans\",\n            \"description\": \"Get details of all loans for any users. You can filter with user_id, status, and approved_on columns\",\n            \"path\": \"/loans\"\n        },\n        {\n            \"name\": \"Options\",\n            \"description\": \"List all available data options. To get the data for any path, please call with base_url/<path>\",\n            \"path\": \"/options\"\n        },\n        {\n            \"name\": \"Lenders\",\n            \"description\": \"Get the list of all the lenders within the system. Should not appear for anyone\",\n            \"path\": \"/lenders\"\n        },\n        {\n            \"name\": \"Loan analytics\",\n            \"description\": \"Analytics of loans for organization grouped by month. You can filter with the month column\",\n            \"path\": \"/analytics/loans\"\n        },\n        {\n            \"name\": \"Loans\",\n            \"description\": \"Get transactions for loans. You can filter data using the loan_id and created_on columns\",\n            \"path\": \"/loans/transactions\"\n        },\n        {\n            \"name\": \"Loans\",\n            \"description\": \"Get schedules for specific loans. You can filter data using the loan_id and created_on columns\",\n            \"path\": \"/loans/schedules\"\n        },\n        {\n            \"name\": \"Transactions\",\n            \"description\": \"Get details of all user transactions. You can filter data using the user_id column\",\n            \"path\": \"/transactions\"\n        },\n        {\n            \"name\": \"Top offers\",\n            \"description\": \"Get the list of top loan offers in the Lendsqr ecosystem.\",\n            \"path\": \"/lenders/top-offers\"\n        },\n        {\n            \"name\": \"Lenders loans\",\n            \"description\": \"Get the list of all the loans that all lenders in the Lendsqr ecosystem have\",\n            \"path\": \"/lenders/loans\"\n        },\n        {\n            \"name\": \"Cards\",\n            \"description\": \"Get details of all cards.\",\n            \"path\": \"/cards\"\n        },\n        {\n            \"name\": \"Bank Accounts\",\n            \"description\": \"Get details of all bank accounts.\",\n            \"path\": \"/bank-accounts\"\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// DFL_004: Get Users Data Positive Test Case\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains array of user data\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.success).to.be.true;\r",
									"    pm.expect(jsonData.data).to.be.an('array').that.is.not.empty;\r",
									"});\r",
									"\r",
									"// // DFL_005: Get Users Data (Negative - Invalid API key)\r",
									"// pm.test(\"Status code is 401 for invalid API key\", function () {\r",
									"//     pm.response.to.have.status(401);\r",
									"// });\r",
									"\r",
									"// pm.test(\"Error message indicates invalid authentication\", function () {\r",
									"//     var jsonData = pm.response.json();\r",
									"//     pm.expect(jsonData.success).to.be.false;\r",
									"//     pm.expect(jsonData.message).to.include('invalid authentication');\r",
									"// });\r",
									"\r",
									"// DFL_006: Get Users Data (Positive - Pagination)\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains 10 or fewer user records\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.success).to.be.true;\r",
									"    pm.expect(jsonData.data).to.be.an('array');\r",
									"    pm.expect(jsonData.data.length).to.be.at.most(10);\r",
									"});\r",
									"\r",
									"// // DFL_007: Get Users Data (Edge case - Non-existent page)\r",
									"// pm.test(\"Status code is 200\", function () {\r",
									"//     pm.response.to.have.status(200);\r",
									"// });\r",
									"\r",
									"// pm.test(\"Response contains empty data array\", function () {\r",
									"//     var jsonData = pm.response.json();\r",
									"//     pm.expect(jsonData.success).to.be.true;\r",
									"//     pm.expect(jsonData.data).to.be.an('array').that.is.empty;\r",
									"// });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}data/users",
							"host": [
								"{{base_url}}data"
							],
							"path": [
								"users"
							]
						},
						"description": "| Field | Type | Description |\n| --- | --- | --- |\n| org_id | `integer` | 9999 |\n| organization | `string` | \"Example Lender\" |\n| id | `integer` | 44691 |\n| first_name | `string` | \"Ado\\`\" |\n| last_name | `string` | \"John Sule\" |\n| full_name | `string` | \"Ado John Sule\" |\n| phone_number | `string` | \"07062569817\" |\n| phone_number_hash | `string` | \"318c88a8e1fcfc049114e69128275b4d\" |\n| email | `string` | \"Ado@lendsqr.com\" |\n| bvn | `string` | \"21234567890\" |\n| bvn_phone_number | `string` | \"08012345678\" |\n| `date`_of_birth | `date` | \"1990-09-10\" |\n| age | `integer` | 26 |\n| gender | `string` | \"Female\" |\n| stage_id | `integer` | 6 |\n| stage | `string` | \"done\" |\n| photo_url | `string` | \"[https://image.url.com\"](https://image.url.com) |\n| mifos_client_id | `string` | \"41053\" |\n| client_id | `string` | \"41053\" |\n| savings_id | `string` | \"47197\" |\n| account_number | `string` | \"IDR000047197----------\" |\n| account_balance | `float` | 1144.25 |\n| account_name | `string` | \"Ado John Sule\" |\n| referral_code | `string` | \"B7YEHI\" |\n| device_id | `string` | \"bd96e5e050c0529d\" |\n| notification_token | `string` | \"****\" |\n| device_type | `string` | \"Android\" |\n| tier_id | `integer` | 24 |\n| tier | `string` | \"Tier 3\" |\n| withdrawal_limit | `integer` | 1000000 |\n| deposit_limit | `integer` | 20000 |\n| borrower_max_cumulative_amount | `float` | 999999999999 |\n| support_email | `string` | \"support@example.com\" |\n| loan_count | `integer` | 14 |\n| savings_plans | `integer` | 0 |\n| savings_target | `integer` | 0 |\n| savings_balance | `integer` | 0 |\n| activated | `integer` | 1 |\n| activated_on | `datetime` |  |\n| blacklisted | `integer` | 0 |\n| reason | `string` | null |\n| selfie_bvn_check | `string` | \"Successful\" |\n| selfie_id_check | `string` | \"Successful\" |\n| nok_first_name | `string` | \"Evelyn\" |\n| nok_last_name | `string` | \"Peters\" |\n| nok_phone_number | `string` | \"09099494342\" |\n| nok_email | `string` | \"evelyn@lendsqr.com\" |\n| nok_address | `string` | \"Ayodele Oke-Owo Street Gbagada\" |\n| nok_relationship | `string` | \"Others\" |\n| marital_status | `string` | \"Single\" |\n| no_of_dependent | `string` | \"0\" |\n| type_of_residence | `string` | \"Parents Apartment\" |\n| educational_attainment | `string` | \"BSc, HND and Other Equivalent\" |\n| employment_status | `string` | \"Employed\" |\n| sector_of_employment | `string` | \"Other Financial\" |\n| current_employer | `string` | \"Lendsqr\" |\n| employment_category | `string` | \"Private Company\" |\n| monthly_net_income | `string` | \"200,000 - 399,999\" |\n| work_start_date | `datetime` |  |\n| work_email | `string` | \"ado@example.com\" |\n| country | `string` | \"NGA\" |\n| city | `string` | \"Gbagada\" |\n| lga | `string` | \"Kosofe\" |\n| street | null | null |\n| nearest_landmark | `string` | \"Deeper Life Church\" |\n| longitude | `float` | \\-102.0837554932 |\n| latitude | `float` | 47.421546936 |\n| address | `string` | \"Lagos\" |"
					},
					"response": [
						{
							"name": "Users",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}data/users",
									"host": [
										"{{base_url}}data"
									],
									"path": [
										"users"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Wed, 28 Feb 2024 23:05:31 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "X-Request-ID",
									"value": "2b47c2f1-dea7-4c19-8250-e05e43f48ed0"
								},
								{
									"key": "Last-Modified",
									"value": "Wed, 28 Feb 2024 23:05:29 GMT"
								},
								{
									"key": "ETag",
									"value": "W/\"39515-/Q53k0DdvDTRus/qCQzKY2+97vM\""
								},
								{
									"key": "CF-Cache-Status",
									"value": "DYNAMIC"
								},
								{
									"key": "Server",
									"value": "cloudflare"
								},
								{
									"key": "CF-RAY",
									"value": "85cc5004cf47636a-LHR"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": true,\n    \"data\": [\n        {\n            \"org_id\": 9999,\n            \"organization\": \"Example Lender\",\n            \"id\": 44691,\n            \"first_name\": \"Ado`\",\n            \"last_name\": \"John Sule\",\n            \"full_name\": \"Ado John Sule\",\n            \"phone_number\": \"07062569817\",\n            \"phone_number_hash\": \"318c88a8e1fcfc049114e69128275b4d\",\n            \"email\": \"Ado@lendsqr.com\",\n            \"bvn\": \"21234567890\",\n            \"bvn_phone_number\": \"08012345678\",\n            \"date_of_birth\": \"1990-09-10\",\n            \"age\": 26,\n            \"gender\": \"Female\",\n            \"stage_id\": 6,\n            \"stage\": \"done\",\n            \"photo_url\": \"https://image.url.com\",\n            \"mifos_client_id\": \"41053\",\n            \"client_id\": \"41053\",\n            \"savings_id\": \"47197\",\n            \"account_number\": \"IDR000047197----------\",\n            \"account_balance\": 1144.25,\n            \"account_name\": \"Ado John Sule\",\n            \"referral_code\": \"B7YEHI\",\n            \"referred_by\": null,\n            \"referrer_name\": null,\n            \"referrer_email\": null,\n            \"referrer_phone\": null,\n            \"referrer_code\": null,\n            \"device_id\": \"bd96e5e050c0529d\",\n            \"notification_token\": \"********************************\",\n            \"device_type\": \"Android\",\n            \"tier_id\": 24,\n            \"tier\": \"Tier 3\",\n            \"withdrawal_limit\": 1000000,\n            \"deposit_limit\": 20000,\n            \"borrower_max_cumulative_amount\": 999999999999,\n            \"support_email\": \"support@example.com\",\n            \"loan_count\": 14,\n            \"savings_plans\": 0,\n            \"savings_target\": 0,\n            \"savings_balance\": 0,\n            \"activated\": 1,\n            \"activated_on\": \"2021-02-01T10:15:08.000Z\",\n            \"blacklisted\": 0,\n            \"reason\": null,\n            \"selfie_bvn_check\": \"Successful\",\n            \"selfie_id_check\": \"Successful\",\n            \"last_login_date\": \"2023-10-02T23:20:36.000Z\",\n            \"created_on\": \"2021-02-01T11:02:00.000Z\",\n            \"modified_on\": \"2023-10-02T23:20:36.000Z\",\n            \"deleted_on\": null,\n            \"nok_first_name\": \"Evelyn\",\n            \"nok_last_name\": \"Peters\",\n            \"nok_phone_number\": \"09099494342\",\n            \"nok_email\": \"evelyn@lendsqr.com\",\n            \"nok_address\": \"Ayodele Oke-Owo Street  Gbagada\",\n            \"nok_relationship\": \"Others\",\n            \"marital_status\": \"Single\",\n            \"no_of_dependent\": \"0\",\n            \"type_of_residence\": \"Parents Apartment\",\n            \"educational_attainment\": \"BSc, HND and Other Equivalent\",\n            \"employment_status\": \"Employed\",\n            \"sector_of_employment\": \"Other Financial\",\n            \"current_employer\": \"Lendsqr\",\n            \"employment_category\": \"Private Company\",\n            \"monthly_net_income\": \"200,000 - 399,999\",\n            \"work_start_date\": \"2020-11-15T23:00:00.000Z\",\n            \"work_email\": \"ado@example.com\",\n            \"country\": \"NGA\",\n            \"city\": \"Gbagada\",\n            \"lga\": \"Kosofe\",\n            \"street\": null,\n            \"nearest_landmark\": \"Deeper Life Church\",\n            \"longitude\": -102.0837554932,\n            \"latitude\": 47.421546936,\n            \"address\": \"Lagos\",\n            \"process_time\": \"2024-02-28T03:20:26.000Z\"\n        }\n    ]\n}"
						}
					]
				}
			],
			"description": "### Introduction\n\nLenders and their customers generate a lot of data that are important for lenders outside of the Lendsqr ecosystem. For example, lenders may want to use new customer information to drive drip marketing. Or they may want to use loan data to send customized reminders to borrowers.\n\nIrrespective of what the lender wants, Lendsqr allows lenders to use Adjutor APIs to get these data. There are almost infinite limits to the data a lender can get for their customers, transactions, audit activities, etc.\n\nThe Adjutor data layer provides the functionality using simple RESTful APIs.\n\n#### Common Parameters\n\n- Getting individual data: Some endpoints allow you to get individual data instead of everything, which at times can be overwhelming. For example, you can get /data/users/:id.\n    \n\n- Pagination: Every data endpoint supports pagination with the default being 100.\n    \n\n- Filtering: Some data endpoints support filtering. The filters available would be provided in the description\n    \n\n- Process time: Some data endpoints are not online in real-time as they are processed as part of our batch operations. These data options would have process time to show the time the data set was created"
		},
		{
			"name": "Operational Services",
			"item": [
				{
					"name": "Miscellaneous",
					"item": [
						{
							"name": "Get List of Banks",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Positive Test Case\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has successful status\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"success\");\r",
											"});\r",
											"\r",
											"pm.test(\"Data array is not empty\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data).to.be.an('array').that.is.not.empty;\r",
											"});\r",
											"\r",
											"pm.test(\"Bank objects have correct structure\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    jsonData.data.forEach(function(bank) {\r",
											"        pm.expect(bank).to.have.property('name').that.is.a('string');\r",
											"        pm.expect(bank).to.have.property('shortcode');\r",
											"        pm.expect(bank).to.have.property('longcode').that.is.a('string');\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test(\"Meta object has correct structure\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.meta).to.have.property('cost').that.is.a('number');\r",
											"    pm.expect(jsonData.meta).to.have.property('balance').that.is.a('number');\r",
											"});\r",
											"\r",
											"// // Adding this test for the authentication failure case (TC_002)\r",
											"// if (pm.response.code === 401) {\r",
											"//     pm.test(\"Authentication failure returns correct error\", function () {\r",
											"//         var jsonData = pm.response.json();\r",
											"//         pm.expect(jsonData).to.have.property('message');\r",
											"//         pm.expect(jsonData.message).to.include('authentication');\r",
											"//     });\r",
											"// }"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}banks",
									"host": [
										"{{base_url}}banks"
									]
								},
								"description": "This endpoint is used for getting banks and their codes.\n\n#### Response Code\n\n| Field | Type | Description |\n| --- | --- | --- |\n| name | `string` | The name of the bank (e.g., \"Access Bank\"). |\n| shortcode | `string` | A unique code for the bank issued by the Central Bank of Nigeria (e.g., \"044\"). |\n| longcode | `string` | A unique code for the bank on the NIBSS network (e.g., \"000014\"). |"
							},
							"response": [
								{
									"name": "Get List of Banks",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}banks",
											"host": [
												"{{base_url}}banks"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Mon, 14 Aug 2023 13:17:55 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "X-Powered-By",
											"value": "Express"
										},
										{
											"key": "X-Request-ID",
											"value": "1c82274f-e038-4de1-998d-8d16b721d3c5"
										},
										{
											"key": "Last-Modified",
											"value": "Mon, 14 Aug 2023 13:17:53 GMT"
										},
										{
											"key": "ETag",
											"value": "W/\"dcc-ImNirDzX8D8qoFcwASXEATbzskg\""
										},
										{
											"key": "CF-Cache-Status",
											"value": "DYNAMIC"
										},
										{
											"key": "Server",
											"value": "cloudflare"
										},
										{
											"key": "CF-RAY",
											"value": "7f697b067a3ed42c-LOS"
										},
										{
											"key": "Content-Encoding",
											"value": "gzip"
										}
									],
									"cookie": [],
									"body": "{\n    \"status\": \"success\",\n    \"message\": \"Successful\",\n    \"data\": [\n        {\n            \"name\": \"3line\",\n            \"shortcode\": null,\n            \"longcode\": \"110005\"\n        },\n        {\n            \"name\": \"Access Bank\",\n            \"shortcode\": \"044\",\n            \"longcode\": \"000014\"\n        },\n        {\n            \"name\": \"Alat by Wema\",\n            \"shortcode\": \"035\",\n            \"longcode\": \"000017\"\n        },\n        {\n            \"name\": \"ASO Savings and Loans\",\n            \"shortcode\": \"401\",\n            \"longcode\": \"090001\"\n        },\n        {\n            \"name\": \"Bankly MBF\",\n            \"shortcode\": \"\",\n            \"longcode\": \"090529\"\n        },\n        {\n            \"name\": \"Carbon\",\n            \"shortcode\": \"565\",\n            \"longcode\": \"100026\"\n        },\n        {\n            \"name\": \"CEMCS Microfinance Bank\",\n            \"shortcode\": \"50823\",\n            \"longcode\": \"090154\"\n        },\n        {\n            \"name\": \"Citibank Nigeria\",\n            \"shortcode\": \"023\",\n            \"longcode\": \"000009\"\n        },\n        {\n            \"name\": \"Conpro MFB (Kredi Bank)\",\n            \"shortcode\": \"50200\",\n            \"longcode\": \"090380\"\n        },\n        {\n            \"name\": \"Coronation Merchant Bank\",\n            \"shortcode\": \"559\",\n            \"longcode\": \"060001\"\n        },\n        {\n            \"name\": \"Dot pay\",\n            \"shortcode\": null,\n            \"longcode\": \"090470\"\n        },\n        {\n            \"name\": \"Ecobank Nigeria\",\n            \"shortcode\": \"050\",\n            \"longcode\": \"000010\"\n        },\n        {\n            \"name\": \"Ekondo Microfinance Bank\",\n            \"shortcode\": \"562\",\n            \"longcode\": \"090097\"\n        },\n        {\n            \"name\": \"Fairmoney MFB\",\n            \"shortcode\": \"\",\n            \"longcode\": \"090551\"\n        },\n        {\n            \"name\": \"FBNQuest Merchant Bank\",\n            \"shortcode\": \"911\",\n            \"longcode\": \"060002\"\n        },\n        {\n            \"name\": \"Fidelity Bank\",\n            \"shortcode\": \"070\",\n            \"longcode\": \"000007\"\n        },\n        {\n            \"name\": \"Firmus MFB\",\n            \"shortcode\": \"51314\",\n            \"longcode\": \"090366\"\n        },\n        {\n            \"name\": \"First Bank of Nigeria\",\n            \"shortcode\": \"011\",\n            \"longcode\": \"000016\"\n        },\n        {\n            \"name\": \"First City Monument Bank\",\n            \"shortcode\": \"214\",\n            \"longcode\": \"000003\"\n        },\n        {\n            \"name\": \"FSDH Merchant Bank\",\n            \"shortcode\": \"501\",\n            \"longcode\": \"400001\"\n        },\n        {\n            \"name\": \"Globus Bank\",\n            \"shortcode\": \"103\",\n            \"longcode\": \"000027\"\n        },\n        {\n            \"name\": \"Guaranty Trust Bank\",\n            \"shortcode\": \"058\",\n            \"longcode\": \"000013\"\n        },\n        {\n            \"name\": \"Hasal Microfinance Bank\",\n            \"shortcode\": \"50383\",\n            \"longcode\": \"090121\"\n        },\n        {\n            \"name\": \"Heritage Bank\",\n            \"shortcode\": \"030\",\n            \"longcode\": \"000020\"\n        },\n        {\n            \"name\": \"Jaiz Bank\",\n            \"shortcode\": \"301\",\n            \"longcode\": \"000006\"\n        },\n        {\n            \"name\": \"Keystone Bank\",\n            \"shortcode\": \"082\",\n            \"longcode\": \"000002\"\n        },\n        {\n            \"name\": \"Kuda Bank\",\n            \"shortcode\": \"50211\",\n            \"longcode\": \"090267\"\n        },\n        {\n            \"name\": \"MoniePoint Bank\",\n            \"shortcode\": \"50515\",\n            \"longcode\": \"090405\"\n        },\n        {\n            \"name\": \"Nova Merchant Bank\",\n            \"shortcode\": \"561\",\n            \"longcode\": \"060003\"\n        },\n        {\n            \"name\": \"Nuntius Internal Bank\",\n            \"shortcode\": \"999999\",\n            \"longcode\": \"999999\"\n        },\n        {\n            \"name\": \"One Finance\",\n            \"shortcode\": \"565\",\n            \"longcode\": \"100026\"\n        },\n        {\n            \"name\": \"Palmpay\",\n            \"shortcode\": \"100033\",\n            \"longcode\": \"100033\"\n        },\n        {\n            \"name\": \"Parallex Bank\",\n            \"shortcode\": \"526\",\n            \"longcode\": \"090004\"\n        },\n        {\n            \"name\": \"paycom (Opay)\",\n            \"shortcode\": \"305\",\n            \"longcode\": \"100004\"\n        },\n        {\n            \"name\": \"Polaris Bank\",\n            \"shortcode\": \"076\",\n            \"longcode\": \"000008\"\n        },\n        {\n            \"name\": \"Providus Bank\",\n            \"shortcode\": \"101\",\n            \"longcode\": \"000023\"\n        },\n        {\n            \"name\": \"Rand Merchant Bank Nigeria\",\n            \"shortcode\": \"502\",\n            \"longcode\": \"000024\"\n        },\n        {\n            \"name\": \"Rubies MFB\",\n            \"shortcode\": \"125\",\n            \"longcode\": \"090175\"\n        },\n        {\n            \"name\": \"Sparkle Microfinance Bank\",\n            \"shortcode\": \"51310\",\n            \"longcode\": \"090325\"\n        },\n        {\n            \"name\": \"Stanbic IBTC Bank\",\n            \"shortcode\": \"221\",\n            \"longcode\": \"000012\"\n        },\n        {\n            \"name\": \"Standard Chartered Bank\",\n            \"shortcode\": \"068\",\n            \"longcode\": \"000021\"\n        },\n        {\n            \"name\": \"Sterling Bank\",\n            \"shortcode\": \"232\",\n            \"longcode\": \"000001\"\n        },\n        {\n            \"name\": \"Suntrust Bank\",\n            \"shortcode\": \"100\",\n            \"longcode\": \"000022\"\n        },\n        {\n            \"name\": \"Support MFB\",\n            \"shortcode\": \"295\",\n            \"longcode\": \"090446\"\n        },\n        {\n            \"name\": \"TAJ Bank\",\n            \"shortcode\": \"302\",\n            \"longcode\": \"000026\"\n        },\n        {\n            \"name\": \"TCF MFB\",\n            \"shortcode\": \"51211\",\n            \"longcode\": \"090115\"\n        },\n        {\n            \"name\": \"Titan Trust Bank\",\n            \"shortcode\": \"102\",\n            \"longcode\": \"000025\"\n        },\n        {\n            \"name\": \"Union Bank of Nigeria\",\n            \"shortcode\": \"032\",\n            \"longcode\": \"000018\"\n        },\n        {\n            \"name\": \"United Bank For Africa\",\n            \"shortcode\": \"033\",\n            \"longcode\": \"000004\"\n        },\n        {\n            \"name\": \"Unity Bank\",\n            \"shortcode\": \"215\",\n            \"longcode\": \"000011\"\n        },\n        {\n            \"name\": \"VFD\",\n            \"shortcode\": \"566\",\n            \"longcode\": \"090110\"\n        },\n        {\n            \"name\": \"Wema Bank\",\n            \"shortcode\": \"035\",\n            \"longcode\": \"000017\"\n        },\n        {\n            \"name\": \"Zenith Bank\",\n            \"shortcode\": \"057\",\n            \"longcode\": \"000015\"\n        }\n    ],\n    \"meta\": {\n        \"cost\": 0,\n        \"balance\": 1225\n    }\n}"
								}
							]
						},
						{
							"name": "Get Status Check",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Positive Test Case\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct status\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Data array is not empty\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data).to.be.an('array').that.is.not.empty;\r",
											"});\r",
											"\r",
											"pm.test(\"Service objects have correct structure\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    jsonData.data.forEach(function(service) {\r",
											"        pm.expect(service).to.have.property('service').that.is.a('string');\r",
											"        pm.expect(service).to.have.property('success').that.is.a('boolean');\r",
											"    });\r",
											"});\r",
											"\r",
											"// // Adding this test for the authentication failure case (TC_005)\r",
											"// if (pm.response.code === 401) {\r",
											"//     pm.test(\"Authentication failure returns correct error\", function () {\r",
											"//         var jsonData = pm.response.json();\r",
											"//         pm.expect(jsonData).to.have.property('message');\r",
											"//         pm.expect(jsonData.message).to.include('authentication');\r",
											"//     });\r",
											"// }"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}status",
									"host": [
										"{{base_url}}status"
									]
								},
								"description": "This endpoint is used to obtain the status of systems under Adjutor."
							},
							"response": [
								{
									"name": "Get Status Check",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}status",
											"host": [
												"{{base_url}}status"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Mon, 14 Aug 2023 13:18:09 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "X-Powered-By",
											"value": "Express"
										},
										{
											"key": "X-Request-ID",
											"value": "2c08234b-24ec-4518-9893-6334a9701fe8"
										},
										{
											"key": "ETag",
											"value": "W/\"323-kZyzG8ZmWrOKUR10s/0qZ95jhMM\""
										},
										{
											"key": "CF-Cache-Status",
											"value": "DYNAMIC"
										},
										{
											"key": "Server",
											"value": "cloudflare"
										},
										{
											"key": "CF-RAY",
											"value": "7f697b679c7fd42c-LOS"
										},
										{
											"key": "Content-Encoding",
											"value": "gzip"
										}
									],
									"cookie": [],
									"body": "{\n    \"status\": true,\n    \"data\": [\n        {\n            \"service\": \"adjutor-oraculi-scoring\",\n            \"success\": true\n        },\n        {\n            \"service\": \"adjutor-name-inquiry\",\n            \"success\": false\n        },\n        {\n            \"service\": \"adjutor-name-inquiry-bvn\",\n            \"success\": false\n        },\n        {\n            \"service\": \"adjutor-karma-lookup\",\n            \"success\": true\n        },\n        {\n            \"service\": \"adjutor-bvn-verification\",\n            \"success\": false\n        },\n        {\n            \"service\": \"adjutor-image-compare\",\n            \"success\": true\n        },\n        {\n            \"service\": \"adjutor-ecosystem-lookup\",\n            \"success\": true\n        },\n        {\n            \"service\": \"adjutor-bank-list\",\n            \"success\": true\n        },\n        {\n            \"service\": \"adjutor-crc\",\n            \"success\": false\n        },\n        {\n            \"service\": \"adjutor-firstcentral\",\n            \"success\": false\n        },\n        {\n            \"service\": \"adjutor-credit-registry\",\n            \"success\": false\n        },\n        {\n            \"service\": \"adjutor-oraculi-accounts\",\n            \"success\": true\n        },\n        {\n            \"service\": \"adjutor-oraculi-statement\",\n            \"success\": true\n        },\n        {\n            \"service\": \"adjutor-oraculi-analytics\",\n            \"success\": true\n        },\n        {\n            \"service\": \"adjutor-oraculi-models\",\n            \"success\": true\n        }\n    ]\n}"
								}
							]
						}
					],
					"description": "The Miscellaneous folder contains resources and tools for miscellaneous tasks, such as obtaining bank codes and checking the status of the AdjÃºtor API service to ensure that it is functioning properly. This folder provides a convenient way to access information and troubleshoot any issues, helping you stay informed and in control of your system at all times."
				}
			],
			"description": "These endpoints are a collection of APIs to be used by a lender or an integrator to get information about their accounts, profiles, and wallet balances."
		},
		{
			"name": "Direct Debit",
			"item": [
				{
					"name": "Banks",
					"item": [
						{
							"name": "Get All Banks",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Positive Test Case\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has successful status\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"success\");\r",
											"});\r",
											"\r",
											"pm.test(\"Data array is not empty\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data.data).to.be.an('array').that.is.not.empty;\r",
											"});\r",
											"\r",
											"pm.test(\"Bank objects have correct structure\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    jsonData.data.data.forEach(function(bank) {\r",
											"        pm.expect(bank).to.have.all.keys('id', 'name', 'bank_code', 'institution_code', 'url', 'activation_amount', 'meta');\r",
											"        pm.expect(bank.id).to.be.a('number');\r",
											"        pm.expect(bank.name).to.be.a('string');\r",
											"        pm.expect(bank.bank_code).to.be.a('string');\r",
											"        pm.expect(bank.institution_code).to.be.a('string');\r",
											"        pm.expect(bank.url).to.be.a('string');\r",
											"        pm.expect(bank.activation_amount).to.be.a('string');\r",
											"        pm.expect(bank.meta).to.be.a('string');\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test(\"Meta object has correct structure\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.meta).to.have.property('cost').that.is.a('number');\r",
											"    pm.expect(jsonData.meta).to.have.property('balance').that.is.a('number');\r",
											"});\r",
											"\r",
											"pm.test(\"Pagination is working correctly\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data.meta).to.have.all.keys('records', 'page', 'pages', 'page_size');\r",
											"});\r",
											"\r",
											"// // Adding this test for the authentication failure case (DD_002)\r",
											"// if (pm.response.code === 401) {\r",
											"//     pm.test(\"Authentication failure returns correct error\", function () {\r",
											"//         var jsonData = pm.response.json();\r",
											"//         pm.expect(jsonData).to.have.property('message');\r",
											"//         pm.expect(jsonData.message).to.include('authentication');\r",
											"//     });\r",
											"// }\r",
											"\r",
											"// Adding this test for the sorting functionality (DD_004) Positive Test Case\r",
											"pm.test(\"Banks are sorted correctly\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var sortDir = pm.request.url.query.get('sort_dir');\r",
											"    var bankNames = jsonData.data.data.map(bank => bank.name);\r",
											"    var sortedNames = [...bankNames].sort();\r",
											"    if (sortDir === 'DESC') {\r",
											"        sortedNames.reverse();\r",
											"    }\r",
											"    pm.expect(bankNames).to.eql(sortedNames);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}direct-debit/banks?limit=100&page=1&sort_dir=ASC",
									"host": [
										"{{base_url}}direct-debit"
									],
									"path": [
										"banks"
									],
									"query": [
										{
											"key": "limit",
											"value": "100"
										},
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "sort_dir",
											"value": "ASC"
										}
									]
								},
								"description": "This endpoints returns the lis of banks able to provide direct debit authorizations on their customers' accounts.\n\n#### Response Body Fields\n\n| Field | Type | Description |\n| --- | --- | --- |\n| id | `Integer` | Unique identifier for the bank. |\n| name | `string` | Name of the bank. |\n| bank_code | `string` | This is the CBN code associated with the bank. It is usually 3 digits for commercial banks and 5 digits for microfinance banks. |\n| institution_code | `string` | This is the NIBSS code associated with the bank. It is is usually 6 digits long. For commercial banks, the code is in the format 0000XX where X is from 0 to 99. |\n| url | `string` | URL pointing to the bank's logo or image. |"
							},
							"response": [
								{
									"name": "Get All Banks",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}direct-debit/banks?limit=100&page=1&sort_dir=ASC",
											"host": [
												"{{base_url}}direct-debit"
											],
											"path": [
												"banks"
											],
											"query": [
												{
													"key": "limit",
													"value": "100"
												},
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "sort_dir",
													"value": "ASC"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "X-Powered-By",
											"value": "Express"
										},
										{
											"key": "X-Request-ID",
											"value": "713b4442-1cf6-46bb-8a39-85de0ad54d89"
										},
										{
											"key": "Last-Modified",
											"value": "Wed, 27 Mar 2024 16:28:29 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "6395"
										},
										{
											"key": "ETag",
											"value": "W/\"18fb-Pj1/ZMbxWk/ZZFF1vrvEYAOh3tM\""
										},
										{
											"key": "Date",
											"value": "Wed, 27 Mar 2024 16:28:31 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "{\n    \"status\": \"success\",\n    \"message\": \"success\",\n    \"data\": {\n        \"data\": [\n            {\n                \"id\": 1,\n                \"name\": \"Access Bank\",\n                \"bank_code\": \"044\",\n                \"institution_code\": \"000014\",\n                \"url\": \"https://lendstack-s3.s3.us-east-2.amazonaws.com/bank_logos/044.png\",\n                \"activation_amount\": \"50.00\",\n                \"meta\": \"{\\\"mandate-activation-amount\\\":50,\\\"mandate-activation-bank\\\":\\\"Paystack-Titan\\\",\\\"mandate-activation-account-number\\\":\\\"9880218357\\\"}\"\n            },\n            {\n                \"id\": 7,\n                \"name\": \"Ecobank Nigeria\",\n                \"bank_code\": \"050\",\n                \"institution_code\": \"000010\",\n                \"url\": \"https://lendstack-s3.s3.us-east-2.amazonaws.com/bank_logos/050.png\",\n                \"activation_amount\": \"50.00\",\n                \"meta\": \"{\\\"mandate-activation-amount\\\":50,\\\"mandate-activation-bank\\\":\\\"Paystack-Titan\\\",\\\"mandate-activation-account-number\\\":\\\"9880218357\\\"}\"\n            },\n            {\n                \"id\": 11,\n                \"name\": \"Fidelity Bank\",\n                \"bank_code\": \"070\",\n                \"institution_code\": \"000007\",\n                \"url\": \"https://lendstack-s3.s3.us-east-2.amazonaws.com/bank_logos/070.png\",\n                \"activation_amount\": \"50.00\",\n                \"meta\": \"{\\\"mandate-activation-amount\\\":50,\\\"mandate-activation-bank\\\":\\\"Paystack-Titan\\\",\\\"mandate-activation-account-number\\\":\\\"9880218357\\\"}\"\n            },\n            {\n                \"id\": 10,\n                \"name\": \"First Bank of Nigeria\",\n                \"bank_code\": \"011\",\n                \"institution_code\": \"000016\",\n                \"url\": \"https://lendstack-s3.s3.us-east-2.amazonaws.com/bank_logos/011.png\",\n                \"activation_amount\": \"50.00\",\n                \"meta\": \"{\\\"mandate-activation-amount\\\":50,\\\"mandate-activation-bank\\\":\\\"Paystack-Titan\\\",\\\"mandate-activation-account-number\\\":\\\"9880218357\\\"}\"\n            },\n            {\n                \"id\": 12,\n                \"name\": \"First City Monument Bank\",\n                \"bank_code\": \"214\",\n                \"institution_code\": \"000003\",\n                \"url\": \"https://lendstack-s3.s3.us-east-2.amazonaws.com/bank_logos/214.png\",\n                \"activation_amount\": \"50.00\",\n                \"meta\": \"{\\\"mandate-activation-amount\\\":50,\\\"mandate-activation-bank\\\":\\\"Paystack-Titan\\\",\\\"mandate-activation-account-number\\\":\\\"9880218357\\\"}\"\n            },\n            {\n                \"id\": 16,\n                \"name\": \"Guaranty Trust Bank\",\n                \"bank_code\": \"058\",\n                \"institution_code\": \"000013\",\n                \"url\": \"https://lendstack-s3.s3.us-east-2.amazonaws.com/bank_logos/058.png\",\n                \"activation_amount\": \"50.00\",\n                \"meta\": \"{\\\"mandate-activation-amount\\\":50,\\\"mandate-activation-bank\\\":\\\"Paystack-Titan\\\",\\\"mandate-activation-account-number\\\":\\\"9880218357\\\"}\"\n            },\n            {\n                \"id\": 18,\n                \"name\": \"Keystone Bank\",\n                \"bank_code\": \"082\",\n                \"institution_code\": \"000002\",\n                \"url\": \"https://lendstack-s3.s3.us-east-2.amazonaws.com/bank_logos/082.png\",\n                \"activation_amount\": \"50.00\",\n                \"meta\": \"{\\\"mandate-activation-amount\\\":50,\\\"mandate-activation-bank\\\":\\\"Paystack-Titan\\\",\\\"mandate-activation-account-number\\\":\\\"9880218357\\\"}\"\n            },\n            {\n                \"id\": 22,\n                \"name\": \"Kuda Bank\",\n                \"bank_code\": \"50211\",\n                \"institution_code\": \"090267\",\n                \"url\": \"https://lendstack-s3.s3.us-east-2.amazonaws.com/bank_logos/50211.png\",\n                \"activation_amount\": \"50.00\",\n                \"meta\": \"{\\\"mandate-activation-amount\\\":50,\\\"mandate-activation-bank\\\":\\\"Paystack-Titan\\\",\\\"mandate-activation-account-number\\\":\\\"9880218357\\\"}\"\n            },\n            {\n                \"id\": 25,\n                \"name\": \"Polaris Bank\",\n                \"bank_code\": \"076\",\n                \"institution_code\": \"000008\",\n                \"url\": \"https://lendstack-s3.s3.us-east-2.amazonaws.com/bank_logos/076.png\",\n                \"activation_amount\": \"50.00\",\n                \"meta\": \"{\\\"mandate-activation-amount\\\":50,\\\"mandate-activation-bank\\\":\\\"Paystack-Titan\\\",\\\"mandate-activation-account-number\\\":\\\"9880218357\\\"}\"\n            },\n            {\n                \"id\": 24,\n                \"name\": \"Providus Bank\",\n                \"bank_code\": \"101\",\n                \"institution_code\": \"000023\",\n                \"url\": \"https://lendstack-s3.s3.us-east-2.amazonaws.com/bank_logos/101.png\",\n                \"activation_amount\": \"50.00\",\n                \"meta\": \"{\\\"mandate-activation-amount\\\":50,\\\"mandate-activation-bank\\\":\\\"Paystack-Titan\\\",\\\"mandate-activation-account-number\\\":\\\"9880218357\\\"}\"\n            },\n            {\n                \"id\": 27,\n                \"name\": \"Stanbic IBTC Bank\",\n                \"bank_code\": \"221\",\n                \"institution_code\": \"000012\",\n                \"url\": \"https://lendstack-s3.s3.us-east-2.amazonaws.com/bank_logos/221.png\",\n                \"activation_amount\": \"50.00\",\n                \"meta\": \"{\\\"mandate-activation-amount\\\":50,\\\"mandate-activation-bank\\\":\\\"Paystack-Titan\\\",\\\"mandate-activation-account-number\\\":\\\"9880218357\\\"}\"\n            },\n            {\n                \"id\": 28,\n                \"name\": \"Standard Chartered Bank\",\n                \"bank_code\": \"068\",\n                \"institution_code\": \"000021\",\n                \"url\": \"https://lendstack-s3.s3.us-east-2.amazonaws.com/bank_logos/068.png\",\n                \"activation_amount\": \"100.00\",\n                \"meta\": \"{\\\"mandate-activation-amount\\\":100,\\\"mandate-activation-bank\\\":\\\"Paystack-Titan\\\",\\\"mandate-activation-account-number\\\":\\\"9880218357\\\"}\"\n            },\n            {\n                \"id\": 29,\n                \"name\": \"Sterling Bank\",\n                \"bank_code\": \"232\",\n                \"institution_code\": \"000001\",\n                \"url\": \"https://lendstack-s3.s3.us-east-2.amazonaws.com/bank_logos/232.png\",\n                \"activation_amount\": \"50.00\",\n                \"meta\": \"{\\\"mandate-activation-amount\\\":50,\\\"mandate-activation-bank\\\":\\\"Paystack-Titan\\\",\\\"mandate-activation-account-number\\\":\\\"9880218357\\\"}\"\n            },\n            {\n                \"id\": 34,\n                \"name\": \"Suntrust Bank\",\n                \"bank_code\": \"100\",\n                \"institution_code\": \"000022\",\n                \"url\": \"https://lendstack-s3.s3.us-east-2.amazonaws.com/bank_logos/100.png\",\n                \"activation_amount\": \"50.00\",\n                \"meta\": \"{\\\"mandate-activation-amount\\\":50,\\\"mandate-activation-bank\\\":\\\"Paystack-Titan\\\",\\\"mandate-activation-account-number\\\":\\\"9880218357\\\"}\"\n            },\n            {\n                \"id\": 36,\n                \"name\": \"Union Bank of Nigeria\",\n                \"bank_code\": \"032\",\n                \"institution_code\": \"000018\",\n                \"url\": \"https://lendstack-s3.s3.us-east-2.amazonaws.com/bank_logos/032.png\",\n                \"activation_amount\": \"100.00\",\n                \"meta\": \"{\\\"mandate-activation-amount\\\":100,\\\"mandate-activation-bank\\\":\\\"Paystack-Titan\\\",\\\"mandate-activation-account-number\\\":\\\"9880218357\\\"}\"\n            },\n            {\n                \"id\": 40,\n                \"name\": \"United Bank For Africa\",\n                \"bank_code\": \"033\",\n                \"institution_code\": \"000004\",\n                \"url\": \"https://lendstack-s3.s3.us-east-2.amazonaws.com/bank_logos/033.png\",\n                \"activation_amount\": \"50.00\",\n                \"meta\": \"{\\\"mandate-activation-amount\\\":50,\\\"mandate-activation-bank\\\":\\\"Paystack-Titan\\\",\\\"mandate-activation-account-number\\\":\\\"9880218357\\\"}\"\n            },\n            {\n                \"id\": 37,\n                \"name\": \"Unity Bank\",\n                \"bank_code\": \"215\",\n                \"institution_code\": \"000011\",\n                \"url\": \"https://lendstack-s3.s3.us-east-2.amazonaws.com/bank_logos/215.png\",\n                \"activation_amount\": \"100.00\",\n                \"meta\": \"{\\\"mandate-activation-amount\\\":100,\\\"mandate-activation-bank\\\":\\\"Paystack-Titan\\\",\\\"mandate-activation-account-number\\\":\\\"9880218357\\\"}\"\n            },\n            {\n                \"id\": 2,\n                \"name\": \"Wema Bank\",\n                \"bank_code\": \"035\",\n                \"institution_code\": \"000017\",\n                \"url\": \"https://lendstack-s3.s3.us-east-2.amazonaws.com/bank_logos/035.png\",\n                \"activation_amount\": \"50.00\",\n                \"meta\": \"{\\\"mandate-activation-amount\\\":50,\\\"mandate-activation-bank\\\":\\\"Paystack-Titan\\\",\\\"mandate-activation-account-number\\\":\\\"9880218357\\\"}\"\n            },\n            {\n                \"id\": 41,\n                \"name\": \"Zenith Bank\",\n                \"bank_code\": \"057\",\n                \"institution_code\": \"000015\",\n                \"url\": \"https://lendstack-s3.s3.us-east-2.amazonaws.com/bank_logos/057.png\",\n                \"activation_amount\": \"50.00\",\n                \"meta\": \"{\\\"mandate-activation-amount\\\":50,\\\"mandate-activation-bank\\\":\\\"Paystack-Titan\\\",\\\"mandate-activation-account-number\\\":\\\"9880218357\\\"}\"\n            }\n        ],\n        \"meta\": {\n            \"records\": 19,\n            \"page\": \"1\",\n            \"pages\": 1,\n            \"page_size\": \"100\"\n        }\n    },\n    \"meta\": {\n        \"cost\": 1,\n        \"balance\": 1010\n    }\n}"
								}
							]
						},
						{
							"name": "Verify Bank Account Number",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Positive Test Case\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has successful status\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"success\");\r",
											"});\r",
											"\r",
											"pm.test(\"Data object has correct structure\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data).to.have.all.keys('account_name', 'bvn', 'session_id');\r",
											"    pm.expect(jsonData.data.account_name).to.be.a('string');\r",
											"    pm.expect(jsonData.data.bvn).to.be.a('string');\r",
											"    pm.expect(jsonData.data.session_id).to.be.a('string');\r",
											"});\r",
											"\r",
											"pm.test(\"BVN is masked correctly\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data.bvn).to.match(/^22\\d{9}$/);\r",
											"});\r",
											"\r",
											"pm.test(\"Meta object has correct structure\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.meta).to.have.property('cost').that.is.a('number');\r",
											"    pm.expect(jsonData.meta).to.have.property('balance').that.is.a('number');\r",
											"});\r",
											"\r",
											"// // Adding these tests for the error cases (DD_007, DD_008, DD_009, DD_010) -- Negative Test Case\r",
											"// if (pm.response.code === 400 || pm.response.code === 401) {\r",
											"//     pm.test(\"Error response has correct structure\", function () {\r",
											"//         var jsonData = pm.response.json();\r",
											"//         pm.expect(jsonData).to.have.property('status').that.equals('error');\r",
											"//         pm.expect(jsonData).to.have.property('message').that.is.a('string');\r",
											"//     });\r",
											"\r",
											"//     if (pm.response.code === 400) {\r",
											"//         pm.test(\"Error message for invalid input\", function () {\r",
											"//             var jsonData = pm.response.json();\r",
											"//             pm.expect(jsonData.message).to.match(/invalid (account number|bank code)|missing required field/i);\r",
											"//         });\r",
											"//     }\r",
											"\r",
											"//     if (pm.response.code === 401) {\r",
											"//         pm.test(\"Authentication failure returns correct error\", function () {\r",
											"//             var jsonData = pm.response.json();\r",
											"//             pm.expect(jsonData.message).to.include('authentication');\r",
											"//         });\r",
											"//     }\r",
											"// }"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"account_number\": \"0235802018\",\n    \"bank_code\": \"058\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}direct-debit/banks/account-lookup",
									"host": [
										"{{base_url}}direct-debit"
									],
									"path": [
										"banks",
										"account-lookup"
									]
								},
								"description": "This endpoint is used to verify the validity and details of a Nigerian account number.\n\n#### Request Body Field\n\n| Field | Type | Description |\n| --- | --- | --- |\n| account_number | `string` | **Required**. A valid `NUBAN` account number which must be 10 digits. |\n| bank_id | `integer` | **Required**. Identifier of the bank to which the account belongs. |\n\n#### Response Body Field\n\n| Field | Type | Description |\n| --- | --- | --- |\n| account_name | `string` | Name of the account holder associated with the account number. |\n| bvn | `string` | Masked Bank Verification Number (BVN) associated with the account holder. If the BVN on the account is 22222222222 then it will be shown as 22000000022 |\n| session_id | `string` | Session ID or identifier associated with the account lookup operation. |"
							},
							"response": [
								{
									"name": "Verify Bank Account Number",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"account_number\": \"2150302690\",\n    \"bank_code\": \"057\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}direct-debit/banks/account-lookup",
											"host": [
												"{{base_url}}direct-debit"
											],
											"path": [
												"banks",
												"account-lookup"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "X-Powered-By",
											"value": "Express"
										},
										{
											"key": "X-Request-ID",
											"value": "ea9bc497-d658-4848-9906-d4d2c5274bcf"
										},
										{
											"key": "Last-Modified",
											"value": "Wed, 27 Mar 2024 16:50:07 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "186"
										},
										{
											"key": "ETag",
											"value": "W/\"ba-/00MCsOg6ox3KzdLPt8n1Zi280k\""
										},
										{
											"key": "Date",
											"value": "Wed, 27 Mar 2024 16:50:11 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "{\n    \"status\": \"success\",\n    \"message\": \"success\",\n    \"data\": {\n        \"account_name\": \"vee Test\",\n        \"bvn\": \"220000000099\",\n        \"session_id\": \"999999230427160615129743771734\"\n    },\n    \"meta\": {\n        \"cost\": 1,\n        \"balance\": 1010\n    }\n}"
								}
							]
						}
					],
					"description": "These endpoints are used to get the list of Nigerian banks, details of specific banks. They can also be used to bank account verification.\n\n#### Note\n\nNot all banks are included as some banks have either not implemented their direct debit service, or they return DO NOT HONOR on direct debit requests.\n\nIf a bank is missing, please email [support@lendsqr.com](https://mailto:support@lendsqr.com) for assistance or more details."
				}
			],
			"description": "## Getting started\n\nDirect debit is a payment method that allows an account holder to grant authorization for a biller or lender to take money from their bank account for services as of when due. Direct debit is similar to debit cards in its ability to debit a customerâ€™s account with prior authorization.\n\nDirect debit helps businesses that require recurring payments on specific dates with fixed amounts, such as insurance premiums, loan repayments, service subscriptions, or variable recurring payments on different dates (e.g., postpaid lines, and electricity usage).\n\nThis direct debit API facilitates the process for Service Providers (referred to as Billers) to generate debit mandate instructions on their client's/customers' bank accounts for services rendered or products sold.\n\nThese debit mandate instructions are created as digital versions of physical instructions duly signed by the account owners (clients/customers). Once generated, the mandate instructions are automatically sent to the bank where the account is held for review and approval. The approval process requires the bank to contact the account owner to authorize the mandate, which typically takes 24 to 48 hours.\n\nThe system automatically assigns a unique mandate code to each initiated mandate. This mandate code is used to initiate a direct debit transaction on the bank account associated with the debit mandate instruction.\n\nThis document provides a comprehensive overview and detailed specifications of the Direct Debit APIs, including all the necessary information for seamless integration into your respective applications.\n\n## Direct debit process\n\nDirect debit mandates follow a streamlined process that may take at least 2 hours from activation to when they are available for debits. These steps are:\n\n- Mandate creation\n- Mandate activation\n- Setup for debit\n- Transactions\n    \n\n### Mandate creation\n\nThe first step is the creation of mandate using the API defined in this collection. As soon as the mandate is created, you should inform the customer of the next steps about how to activate the mandate.\n\nFrom a best practices point of view, the customer should be informed on your app, by email, and SMS.\n\n### Mandate activation\n\nActivation of the mandate is usually done by the transfer of a N50 (or N100 for banks where the minimum transfer amount is N100) to designated bank accounts operated by NIBSS. The customer has 168 hours (7 days) to send this amount if not the mandate is automatically canceled.\n\nImmediately the activation amount is received at either of the banks, the mandate is automatically activated. However, it is not available for debit at this time.\n\n#### Banks for mandate activation\n\nThe following are the authorized banks which customers should use for direct debit mandate activation.\n\n| **Fidelity Bank** | **Paystack Titan** |\n| --- | --- |\n| Account: 9020025928  <br>Bank: Fidelity Bank Plc.  <br>You can transfer from USSD, mobile app or internet banking | Account: 9880218357  <br>Bank: Paystack-Titan  <br>You can transfer from your mobile app and internet banking |\n\n### Setup for debit\n\nThere are usually some backend processes done by NIBSS that then processes the accounts for debit and this may take up to 2 hours before completion. If you try to debit the mandate before this time, it would return an error message such as \"do not honor\"."
		},
		{
			"name": "Kolo",
			"item": [
				{
					"name": "List Bank Accounts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Positive Test Case\r",
									"pm.test(\"TC_001 - Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"TC_001 - Response contains array of bank accounts\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data).to.be.an('array');\r",
									"    pm.expect(jsonData.data.length).to.be.at.least(1);\r",
									"});\r",
									"\r",
									"pm.test(\"TC_001 - Meta information is present\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.meta).to.be.an('object');\r",
									"    pm.expect(jsonData.meta).to.have.property('cost');\r",
									"    pm.expect(jsonData.meta).to.have.property('balance');\r",
									"});\r",
									"\r",
									"// // Negative Test Case\r",
									"// pm.test(\"TC_002 - Unauthorized access (with invalid token)\", function () {\r",
									"//     pm.response.to.have.status(401);\r",
									"//     var jsonData = pm.response.json();\r",
									"//     pm.expect(jsonData.message).to.include('You are not authorized to access this service.');\r",
									"// });\r",
									"\r",
									"// pm.test(\"TC_003 - Empty account list handling\", function () {\r",
									"//     pm.response.to.have.status(200);\r",
									"//     var jsonData = pm.response.json();\r",
									"//     pm.expect(jsonData.data).to.be.an('array').that.is.empty;\r",
									"//     pm.expect(jsonData.meta).to.be.an('object');\r",
									"// });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-access-token",
								"value": "{{x_access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}kolo/bank-accounts",
							"host": [
								"{{base_url}}kolo"
							],
							"path": [
								"bank-accounts"
							]
						}
					},
					"response": [
						{
							"name": "List Bank Accounts",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "x-access-token",
										"value": "{{x_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}kolo/bank-accounts",
									"host": [
										"{{base_url}}kolo"
									],
									"path": [
										"bank-accounts"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "X-Request-ID",
									"value": "a87040a9-22aa-4e18-808e-7945a6c62754"
								},
								{
									"key": "Last-Modified",
									"value": "Thu, 20 Jun 2024 14:17:21 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "714"
								},
								{
									"key": "ETag",
									"value": "W/\"2ca-gPZE9AF1kgKZM+GHN3nVUwxuLd8\""
								},
								{
									"key": "Date",
									"value": "Thu, 20 Jun 2024 14:17:23 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"status\": \"success\",\n    \"data\": [\n        {\n            \"id\": \"6412961b-bf28-4096-9391-6dc899ab3032\",\n            \"account_name\": \"Adewunmi O Akinsanya\",\n            \"account_number\": \"2208667061\",\n            \"balance\": \"436.56\",\n            \"currency\": \"NGN\",\n            \"last_balance_time\": \"2024-06-08T15:02:10.000Z\",\n            \"last_synced\": \"2024-06-14T19:00:07.000Z\",\n            \"data_source\": [\n                \"email\"\n            ],\n            \"description\": \"Autodiscovered by Kolo\",\n            \"bank\": {\n                \"id\": \"d645920e395fedad7bbbed0eca3fe2e0\",\n                \"name\": \"Zenith Bank\",\n                \"short_code\": \"057\",\n                \"long_code\": \"057\",\n                \"icon\": \"https://s3.us-east-2.amazonaws.com/kolo.finance/assets/zenithbank-logo-circle.png\"\n            },\n            \"created_on\": \"2024-04-12T13:29:31.782Z\",\n            \"created_by\": null,\n            \"modified_on\": \"2024-06-14T19:00:07.000Z\",\n            \"modified_by\": null,\n            \"deleted_on\": null,\n            \"deleted_by\": null\n        }\n    ],\n    \"meta\": {\n        \"cost\": 0,\n        \"balance\": 585\n    }\n}"
						}
					]
				},
				{
					"name": "Get Bank Account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Positive Test Case\r",
									"pm.test(\"TC_004 - Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"TC_004 - Response contains correct bank account details\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data).to.be.an('object');\r",
									"    pm.expect(jsonData.data.id).to.eql(pm.variables.get(\"valid_account_id\"));\r",
									"    pm.expect(jsonData.data.account_name).to.be.a('string');\r",
									"    pm.expect(jsonData.data.account_number).to.be.a('string');\r",
									"    pm.expect(jsonData.data.balance).to.be.a('string');\r",
									"    pm.expect(jsonData.data.bank).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test(\"TC_004 - Meta information is present\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.meta).to.be.an('object');\r",
									"    pm.expect(jsonData.meta).to.have.property('cost');\r",
									"    pm.expect(jsonData.meta).to.have.property('balance');\r",
									"});\r",
									"\r",
									"// // Negative Test Case\r",
									"// pm.test(\"TC_005 - Non-existent account handling\", function () {\r",
									"//     pm.response.to.have.status(404);\r",
									"//     var jsonData = pm.response.json();\r",
									"//     pm.expect(jsonData.message).to.include('not found');\r",
									"// });\r",
									"\r",
									"// pm.test(\"TC_006 - Invalid account ID format handling\", function () {\r",
									"//     pm.response.to.have.status(400);\r",
									"//     var jsonData = pm.response.json();\r",
									"//     pm.expect(jsonData.message).to.include('invalid');\r",
									"// });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-access-token",
								"value": "{{x_access_token}}",
								"type": "text"
							},
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{base_url}}kolo/bank-accounts/:id",
							"host": [
								"{{base_url}}kolo"
							],
							"path": [
								"bank-accounts",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "6412961b-bf28-4096-9391-6dc899ab3032"
								}
							]
						}
					},
					"response": [
						{
							"name": "Get Bank Account",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "x-access-token",
										"value": "{{x_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}kolo/bank-accounts/:id",
									"host": [
										"{{base_url}}kolo"
									],
									"path": [
										"bank-accounts",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "6412961b-bf28-4096-9391-6dc899ab3032"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "X-Request-ID",
									"value": "edeb094b-8a91-4e1b-8053-a90a763bcc37"
								},
								{
									"key": "Last-Modified",
									"value": "Thu, 20 Jun 2024 14:18:05 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "712"
								},
								{
									"key": "ETag",
									"value": "W/\"2c8-gZIC1IX58/OqVd6iXQOmoXUiCxg\""
								},
								{
									"key": "Date",
									"value": "Thu, 20 Jun 2024 14:18:09 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"status\": \"success\",\n    \"data\": {\n        \"id\": \"6412961b-bf28-4096-9391-6dc899ab3032\",\n        \"account_name\": \"Adewunmi O Akinsanya\",\n        \"account_number\": \"2208667061\",\n        \"balance\": \"436.56\",\n        \"currency\": \"NGN\",\n        \"last_balance_time\": \"2024-06-08T15:02:10.000Z\",\n        \"last_synced\": \"2024-06-14T19:00:07.000Z\",\n        \"data_source\": [\n            \"email\"\n        ],\n        \"description\": \"Autodiscovered by Kolo\",\n        \"bank\": {\n            \"id\": \"d645920e395fedad7bbbed0eca3fe2e0\",\n            \"name\": \"Zenith Bank\",\n            \"short_code\": \"057\",\n            \"long_code\": \"057\",\n            \"icon\": \"https://s3.us-east-2.amazonaws.com/kolo.finance/assets/zenithbank-logo-circle.png\"\n        },\n        \"created_on\": \"2024-04-12T13:29:31.782Z\",\n        \"created_by\": null,\n        \"modified_on\": \"2024-06-14T19:00:07.000Z\",\n        \"modified_by\": null,\n        \"deleted_on\": null,\n        \"deleted_by\": null\n    },\n    \"meta\": {\n        \"cost\": 0,\n        \"balance\": 585\n    }\n}"
						}
					]
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{access_token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "https://adjutor.lendsqr.com/v2/",
			"type": "string"
		},
		{
			"key": "access_token",
			"value": "sk_live_ltCo70bQnKzkbfmB3euGoWlsPdbhzTPq7Ls0STNn",
			"type": "string"
		},
		{
			"key": "access_token",
			"value": "",
			"type": "string",
			"disabled": true
		},
		{
			"key": "id",
			"value": "6412961b-bf28-4096-9391-6dc899ab3032",
			"type": "string"
		},
		{
			"key": "x-access-token",
			"value": "",
			"type": "string"
		}
	]
}